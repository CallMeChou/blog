<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用网站合集</title>
      <link href="/blog/2021/11/30/%E7%BD%91%E7%AB%99%E5%90%88%E9%9B%86/"/>
      <url>/blog/2021/11/30/%E7%BD%91%E7%AB%99%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="随机图片"><a href="#随机图片" class="headerlink" title="随机图片"></a>随机图片</h1><h2 id="随机图片Picsum"><a href="#随机图片Picsum" class="headerlink" title="随机图片Picsum"></a>随机图片Picsum</h2><p><a href="https://picsum.photos/">Lorem Picsum</a></p><h3 id="随机一张1920-1080的图片"><a href="#随机一张1920-1080的图片" class="headerlink" title="随机一张1920*1080的图片"></a>随机一张1920*1080的图片</h3><p><a href="https://picsum.photos/1920/1080">https://picsum.photos/1920/1080</a></p><h3 id="特定的图片（237是seed）"><a href="#特定的图片（237是seed）" class="headerlink" title="特定的图片（237是seed）"></a>特定的图片（237是seed）</h3><p>​    seed获取 <a href="https://picsum.photos/images">Lorem Picsum - Images</a></p><p><a href="https://picsum.photos/id/237/1920/1080">https://picsum.photos/id/237/1920/1080</a></p><h3 id="黑白"><a href="#黑白" class="headerlink" title="黑白"></a>黑白</h3><p><a href="https://picsum.photos/1920/1080?grayscale">https://picsum.photos/1920/1080?grayscale</a></p><h3 id="模糊"><a href="#模糊" class="headerlink" title="模糊"></a>模糊</h3><p><a href="https://picsum.photos/1920/1080?blur">https://picsum.photos/1920/1080?blur</a></p><p>​    模糊度1-10 <a href="https://picsum.photos/1920/1080?blur=2">https://picsum.photos/1920/1080?blur=2</a></p><h3 id="修改图片格式-jpg-webp"><a href="#修改图片格式-jpg-webp" class="headerlink" title="修改图片格式.jpg .webp"></a>修改图片格式.jpg .webp</h3><p><a href="https://picsum.photos/1920/1080.jpg">https://picsum.photos/1920/1080.jpg</a></p><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a><strong>高级用法</strong></h3><p>列出图片</p><p>使用<code>/v2/list</code>端点获取图像列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://picsum.photos/v2/list</span><br></pre></td></tr></table></figure><p>默认情况下，API每页将返回30个项目。</p><p>要请求另一个页面，请使用<code>?page</code>参数。</p><p>要更改每页的项目数，请使用<code>?limit</code>参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://picsum.photos/v2/list?page=2&amp;limit=100</span><br></pre></td></tr></table></figure><p>该<code>Link</code>头包括关于下一首/上页分页信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: &quot;0&quot;,</span><br><span class="line">        &quot;author&quot;: &quot;Alejandro Escamilla&quot;,</span><br><span class="line">        &quot;width&quot;: 5616,</span><br><span class="line">        &quot;height&quot;: 3744,</span><br><span class="line">        &quot;url&quot;: &quot;https://unsplash.com/...&quot;,</span><br><span class="line">        &quot;download_url&quot;: &quot;https://picsum.photos/...&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>图像细节</p><p>使用<code>/id/&#123;id&#125;/info</code>端点获取有关特定图像的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://picsum.photos/id/0/info</span><br></pre></td></tr></table></figure><p>您可以通过查看<code>Picsum-ID</code>标题或<code>User Comment</code>EXIF元数据中的字段来查找图像的ID 。</p><p>{ “id”: “0”, “author”: “Alejandro Escamilla”, “width”: 5616, “height”: 3744, “url”: “<a href="https://unsplash.com/%E2%80%A6%E2%80%9D">https://unsplash.com/…”</a>, “download_url”: “<a href="https://picsum.photos/%E2%80%A6%E2%80%9D">https://picsum.photos/…”</a> }</p><h2 id="一个好用的api"><a href="#一个好用的api" class="headerlink" title="一个好用的api"></a>一个好用的api</h2><p><a href="https://www.eee.dog/tech/rand-pic-api.html">随机图片API - EEE.DOG</a></p><p>比如bing壁纸：<a href="https://www.eee.dog/tech/rand-pic-api.html">https://www.eee.dog/tech/rand-pic-api.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 网站合集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 实用 </tag>
            
            <tag> 工具箱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记</title>
      <link href="/blog/2021/11/30/python%E7%AC%94%E8%AE%B0/"/>
      <url>/blog/2021/11/30/python%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="pip镜像加速和更新"><a href="#pip镜像加速和更新" class="headerlink" title="pip镜像加速和更新"></a>pip镜像加速和更新</h1><h2 id="国内源："><a href="#国内源：" class="headerlink" title="国内源："></a>国内源：</h2><p>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></p><p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></p><p>华中理工大学：<a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a></p><p>山东理工大学：<a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/</a> </p><p>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p><p><strong>例如：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 包名</span><br></pre></td></tr></table></figure><p>pip install -U dateutil -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p> pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> scipy</p><h2 id="更新pip"><a href="#更新pip" class="headerlink" title="更新pip"></a>更新pip</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip </span><br></pre></td></tr></table></figure><h1 id="git的使用"><a href="#git的使用" class="headerlink" title="git的使用"></a>git的使用</h1><p><a href="https://www.jianshu.com/p/3bedd17343d9">https://www.jianshu.com/p/3bedd17343d9</a></p><p>安装：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name chou                                                   #此英文名不需要跟GitHub账号保持一致</span><br><span class="line">git config --global user.email 3122107411@qq.com                                                      #此邮箱不需要跟GitHub账号保持一致</span><br><span class="line">git config --global push.default matching</span><br><span class="line">git config --global core.quotepath false</span><br><span class="line">git config --global core.editor &quot;vim&quot;</span><br></pre></td></tr></table></figure><p>github建了一个专门的库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@github.com:CallMeChou/git.git</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;更新&quot;</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h1 id="文件读写操作"><a href="#文件读写操作" class="headerlink" title="文件读写操作"></a>文件读写操作</h1><p><img src="https://i.loli.net/2021/11/30/LN6bBUEgCfhMWdy.png" alt="image-20211130140934650"></p><h1 id="github-action"><a href="#github-action" class="headerlink" title="github action"></a>github action</h1><p>相当于一个服务器</p><p>b站视频（En)：<a href="https://www.bilibili.com/video/BV1kf4y1i7dw?from=search&amp;seid=6286585284206871463">https://www.bilibili.com/video/BV1kf4y1i7dw?from=search&amp;seid=6286585284206871463</a></p><p>功能介绍：<a href="https://blog.csdn.net/qq_40748336/article/details/110749375">https://blog.csdn.net/qq_40748336/article/details/110749375</a></p><h2 id="设置时间-UTC标准（schedule）："><a href="#设置时间-UTC标准（schedule）：" class="headerlink" title="设置时间 UTC标准（schedule）："></a>设置时间 UTC标准（schedule）：</h2><p>官方文档：<a href="https://docs.github.com/cn/actions/reference/events-that-trigger-workflows#scheduled-events">https://docs.github.com/cn/actions/reference/events-that-trigger-workflows#scheduled-events</a></p><p>时间换算：<a href="http://timebie.com/cn/universalbeijing.php">http://timebie.com/cn/universalbeijing.php</a></p><p>微信消息推送：<a href="http://sc.ftqq.com/?c=code">http://sc.ftqq.com/?c=code</a></p><p>计划任务语法有五个字段，中间用空格分隔，每个字段代表一个时间单位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌───────────── minute (0 - 59)</span><br><span class="line">│ ┌───────────── hour (0 - 23)</span><br><span class="line">│ │ ┌───────────── day of the month (1 - 31)</span><br><span class="line">│ │ │ ┌───────────── month (1 - 12 or JAN-DEC)</span><br><span class="line">│ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)</span><br><span class="line">│ │ │ │ │                                   </span><br><span class="line">│ │ │ │ │</span><br><span class="line">│ │ │ │ │</span><br><span class="line">* * * * *</span><br></pre></td></tr></table></figure><h1 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python -m venv myvnev</span><br><span class="line">cd mytestenv/Scripts</span><br><span class="line">activate</span><br><span class="line">pip <span class="built_in">list</span></span><br><span class="line">deactivate.bat</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_43463712/article/details/90210108">https://blog.csdn.net/weixin_43463712/article/details/90210108</a></p><p>可以使用cd命令，cd命令的功能是切换到指定的目录：</p><p>命令格式：</p><h1 id="路径-cd"><a href="#路径-cd" class="headerlink" title="路径 cd"></a>路径 cd</h1><p>目录名有几个符号有特殊的含义，“..”代表上<a href="https://www.baidu.com/s?wd=%E4%B8%80%E7%BA%A7%E7%9B%AE%E5%BD%95&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">一级目录</a>、“~”代表HOME目录、“-”代表前一目录。</p><p>因此返回上<a href="https://www.baidu.com/s?wd=%E4%B8%80%E7%BA%A7%E7%9B%AE%E5%BD%95&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">一级目录</a>可以使用命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>①…/ 表示当前文件所在的目录的上一级目录<br>②./ 表示当前文件所在的目录(可以省略)<br>③/ 表示当前站点的根目录(域名映射的硬盘目录)<br>④”/“左倾斜是正斜杠，””右倾斜是反斜杠，可以记为：除号是正斜杠“/”。</p><h1 id="python编译工具"><a href="#python编译工具" class="headerlink" title="python编译工具"></a>python编译工具</h1><h2 id="1-auto-py-to-exe"><a href="#1-auto-py-to-exe" class="headerlink" title="1.auto-py-to-exe"></a>1.auto-py-to-exe</h2><p><code>pip install auto-py-to-exe</code></p><blockquote><p>非常好用的打包工具基于pyinstaller</p></blockquote><h2 id="2-pyinstaller"><a href="#2-pyinstaller" class="headerlink" title="2.pyinstaller"></a>2.pyinstaller</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzU5Nzg5ODQ3NQ==&mid=2247505334&idx=1&sn=5e6e6b23fdec018d584738326e3a4b7b&scene=21#wechat_redirect">别再问我Python打包成exe了！（终极版） (qq.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pyinstaller -F -w -i icon.ico 1.pyPyinstaller -F -i icon.ico daka.py</span><br></pre></td></tr></table></figure><p>将python文件打包成exe文件</p><table><thead><tr><th>-h，–help</th><th align="center">查看该模块的帮助信息</th></tr></thead><tbody><tr><td>-F，-onefile</td><td align="center">产生单个的可执行文件</td></tr><tr><td>-D，–onedir</td><td align="center">产生一个目录（包含多个文件）作为可执行程序</td></tr><tr><td>-a，–ascii</td><td align="center">不包含 Unicode 字符集支持</td></tr><tr><td>-d，–debug</td><td align="center">产生 debug 版本的可执行文件</td></tr><tr><td>-w，–windowed，–noconsolc</td><td align="center">指定程序运行时不显示命令行窗口（仅对 Windows 有效）</td></tr><tr><td>-c，–nowindowed，–console</td><td align="center">指定使用命令行窗口运行程序（仅对 Windows 有效）</td></tr><tr><td>-o DIR，–out=DIR</td><td align="center">指定 spec 文件的生成目录。如果没有指定，则默认使用当前目录来生成 spec 文件</td></tr><tr><td>-p DIR，–path=DIR</td><td align="center">设置 Python 导入模块的路径（和设置 PYTHONPATH 环境变量的作用相似）。也可使用路径分隔符（Windows 使用分号，Linux 使用冒号）来分隔多个路径</td></tr><tr><td>-n NAME，–name=NAME</td><td align="center">指定项目（产生的 spec）名字。如果省略该选项，那么第一个脚本的主文件名将作为 spec 的名字</td></tr></tbody></table><h2 id="3-将exe反编译成py文件"><a href="#3-将exe反编译成py文件" class="headerlink" title="3.将exe反编译成py文件"></a>3.将exe反编译成py文件</h2><p><a href="https://mp.weixin.qq.com/s/ddHJ1E2XniKnFiUSHBXTLw">别再问我exe反编译成Python脚本了！ (qq.com)</a></p><p>pyc-py:<a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a></p><h1 id="json文件处理"><a href="#json文件处理" class="headerlink" title="json文件处理"></a>json文件处理</h1><p><a href="https://www.runoob.com/python/python-json.html">https://www.runoob.com/python/python-json.html</a></p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">json.dumps</td><td align="left">将 Python 对象编码成 JSON 字符串</td></tr><tr><td align="left">json.loads</td><td align="left">将已编码的 JSON 字符串解码为 Python 对象</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.dumps(obj, skipkeys=<span class="literal">False</span>, ensure_ascii=<span class="literal">True</span>, check_circular=<span class="literal">True</span>, allow_nan=<span class="literal">True</span>, cls=<span class="literal">None</span>, indent=<span class="literal">None</span>, separators=<span class="literal">None</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, default=<span class="literal">None</span>, sort_keys=<span class="literal">False</span>, **kw)</span><br></pre></td></tr></table></figure><h1 id="ico文件"><a href="#ico文件" class="headerlink" title="ico文件"></a>ico文件</h1><p>转化：</p><p><a href="http://www.ico51.cn/">http://www.ico51.cn/</a></p><p>下载：（阿里矢量图）</p><p><a href="https://www.iconfont.cn/?spm=a313x.7781069.1998910419.d4d0a486a">https://www.iconfont.cn/?spm=a313x.7781069.1998910419.d4d0a486a</a></p><h1 id="爬虫部分"><a href="#爬虫部分" class="headerlink" title="爬虫部分"></a>爬虫部分</h1><h2 id="爬虫补充知识："><a href="#爬虫补充知识：" class="headerlink" title="爬虫补充知识："></a>爬虫补充知识：</h2><h3 id="协议："><a href="#协议：" class="headerlink" title="协议："></a>协议：</h3><p>协议，网络协议的简称，网络协议是通信计算机双方必须共同遵从的一组约定。如怎么样建立连接、怎么样互相识别等。只有遵守这个约定，计算机之间才能相互通信交流。</p><h3 id="HTTP-HTTPS-协议："><a href="#HTTP-HTTPS-协议：" class="headerlink" title="HTTP/HTTPS 协议："></a>HTTP/HTTPS 协议：</h3><p>目前网站主要有两种协议，HTTP 和 HTTPS，具体的原理我们可以不用深究，我们只需要知道他们的区别：</p><p><img src="https://i.loli.net/2021/11/30/1uErKP5D7hbMSVd.png" alt="image-20210822095440492"></p><p><code>URL</code> 是缩写，其英文全称是：<code>Uniform Resource Locator</code>（统一资源定位符）。<code>URL</code> 的格式规范规定了由哪几部分组成，以及各种符号的作用：</p><p><img src="https://i.loli.net/2021/11/30/c9NoSrUwd6lh1qp.png" alt="URL格式"></p><ul><li>路径与参数之间用 <code>?</code> 分隔。看到问号 <code>?</code> 就知道后面的内容就是参数了。</li><li>多个参数之间用 <code>&amp;</code> 分隔。</li><li>参数用“参数名=参数值”（<code>key=value</code>）的格式表示。</li></ul><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>比如：<a href="https://www.douban.com/gallery/topic/116390/?from=hot_topic_note&amp;sort=new">https://www.douban.com:443/gallery/topic/116390/?from=hot_topic_note&amp;sort=new</a></p><p>域名后的 <code>:443</code> 表示网站的端口号。<code>HTTP</code> 协议默认的端口号是 <code>80</code> ，<code>HTTPS</code> 协议默认的端口号是 <code>443</code> 。默认的端口号在 URL 中是可以省略的，其它的端口号就必须要写明了。</p><p>上网浏览时，大多数情况下看不到端口号，但是大家在开发过程中可能经常会用到不同的端口号，以 <code>8000</code> 、 <code>8080</code> 最常见，这些端口号必须写明。</p><h3 id="requests介绍"><a href="#requests介绍" class="headerlink" title="requests介绍"></a>requests介绍</h3><p>官方文档：<a href="https://requests.readthedocs.io/zh_CN/latest/">https://requests.readthedocs.io/zh_CN/latest/</a></p><p>http请求的介绍</p><p>POST、DELETE、PUT、GET就像对应着数据库的CRUD（增、删、改、查）</p><p>使用标准：</p><table><thead><tr><th>请求方式</th><th>URL</th><th>操作</th></tr></thead><tbody><tr><td>POST</td><td>/URL</td><td>增加</td></tr><tr><td>DELETE</td><td>/URL/xxx</td><td>删除</td></tr><tr><td>PUT</td><td>/URL/xxx</td><td>修改</td></tr><tr><td>GET</td><td>/URL/xxx</td><td>查询</td></tr></tbody></table><p><strong>GET请求</strong>，用于向服务器发送查询数据的请求，只是查询，不会增加、修改数据，不会影响服务器上资源的内容。无论进行多少次都，执行后的结果都是一样的，具有幂等性。</p><p><strong>PUT请求</strong>，是用于向服务器发送数据，从而改变数据，修改数据内容。但是不会增加数据的种类。无论进行多少次操作，其结果也都一样，具有幂等性。</p><p><strong>POST请求</strong>，与PUT请求类似。都是向服务器端发送数据，但是改请求会增加数据的种类，创建新的内容。不具有幂等性。</p><p><strong>DELETE请求</strong>，用来删除某一资源</p><p><strong>PUT与POST的区别？</strong></p><p>​    PUT和POST都是向服务器发送数据，</p><p>​    但是POST主要是在一个集合资源之上（url），PUT主要作用在一个具体的资源之上（url/xxx）</p><p>幂等性：幂等意味着对同一个URL的多次请求会返回一样的结果</p><h4 id="1-response对象"><a href="#1-response对象" class="headerlink" title="1.response对象"></a>1.response对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requestsres = requests.get(<span class="string">&#x27;https://www.ustc.edu.cn/&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li><p>状态码 res.status_code</p></li><li><p>响应内容res.text</p></li><li><p>二进制方式 res.content</p></li></ol><p>关于编码问题：            <img src="https://i.loli.net/2021/11/30/5cdxbBRZADrUHGe.png" alt="image-20210822102345287"></p><ol start="4"><li>res.json()</li></ol><h4 id="2-Referer"><a href="#2-Referer" class="headerlink" title="2.Referer"></a>2.Referer</h4><p>为了模拟浏览器自动加 Referer 信息的行为，可以调用语句：</p><p>headers = {‘Referer’: ‘youkeda.com’}<br>同样，程序访问此图片也是失败的，请看演示程序：</p><p>http 响应状态码是：403 ，表示禁止访问此图片。</p><p>解决办法<br>贴到浏览器能访问是因为此图床允许无 Referer 信息时访问。但也不是所有图床都允许呢，况且即使同一个图床，也可能修改规则，某一天突然改为必须本站内才能也未可知。</p><p>所以，为了一劳永逸的解决问题，需要把 Referer 信息设置为图片原始使用的网站。</p><h4 id="3-Host"><a href="#3-Host" class="headerlink" title="3.Host"></a>3.Host</h4><p><strong>Host</strong> 请求头指明了请求将要发送到的服务器主机名和端口号。</p><p>如果没有包含端口号，会自动使用被请求服务的默认端口（比如HTTPS URL使用443端口，HTTP URL使用80端口）。</p><p>所有HTTP/1.1 请求报文中必须包含一个<code>Host</code>头字段。对于缺少<code>Host</code>头或者含有超过一个<code>Host</code>头的HTTP/1.1 请求，可能会收到<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/400"><code>400</code></a>（Bad Request）状态码。</p><h4 id="4-cookies"><a href="#4-cookies" class="headerlink" title="4.cookies"></a>4.cookies</h4><p><img src="https://i.loli.net/2021/11/15/s8z6XdYNRbI2rCa.png" alt="img"></p><p>可以放在headers也可以单列出来，单列出来有点麻烦，所以还不如<strong>放到headers里面</strong></p><p><img src="https://i.loli.net/2021/11/15/CcLfMshVYeiyvDH.png" alt="img"> </p><p>Cookies解析  <code>cookiesjar</code></p><h2 id="下载文件的两种方式："><a href="#下载文件的两种方式：" class="headerlink" title="下载文件的两种方式："></a>下载文件的两种方式：</h2><p>（1） requests下载</p><p><img src="https://i.loli.net/2021/11/15/GR5fuJ7UTlMKSO4.png" alt="img"> </p><p>（2）urllib下载文件</p><p><img src="https://i.loli.net/2021/11/15/OKVNEqa6A3ctUuI.png" alt="img"> </p><h2 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h2><p><a href="https://docs.python-requests.org/zh_CN/latest/">Requests: 让 HTTP 服务人类 — Requests 2.18.1 文档 (python-requests.org)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r = requests.get(&#x27;https://api.github.com/user&#x27;, auth=(&#x27;user&#x27;, &#x27;pass&#x27;))</span><br><span class="line">&gt;&gt;&gt; r.status_code</span><br><span class="line">200</span><br><span class="line">&gt;&gt;&gt; r.headers[&#x27;content-type&#x27;]</span><br><span class="line">&#x27;application/json; charset=utf8&#x27;</span><br><span class="line">&gt;&gt;&gt; r.encoding</span><br><span class="line">&#x27;utf-8&#x27;</span><br><span class="line">&gt;&gt;&gt; r.text</span><br><span class="line">u&#x27;&#123;&quot;type&quot;:&quot;User&quot;...&#x27;</span><br><span class="line">&gt;&gt;&gt; r.json()</span><br><span class="line">&#123;u&#x27;private_gists&#x27;: 419, u&#x27;total_private_repos&#x27;: 77, ...&#125;</span><br></pre></td></tr></table></figure><hr><p>这部分文档是以文字为主，从 Requests 的背景讲起，然后对 Requests 的重点功能做了逐一的介绍。</p><ul><li>简介<ul><li><a href="https://docs.python-requests.org/zh_CN/latest/user/intro.html#id2">开发哲学</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/intro.html#apache2">Apache2 协议</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/intro.html#requests">Requests 协议</a></li></ul></li><li>安装 Requests<ul><li><a href="https://docs.python-requests.org/zh_CN/latest/user/install.html#pip-install-requests">pip install requests</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/install.html#id1">获得源码</a></li></ul></li><li>快速上手<ul><li><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html#id2">发送请求</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html#url">传递 URL 参数</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html#id3">响应内容</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html#id4">二进制响应内容</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html#json">JSON 响应内容</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html#id5">原始响应内容</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html#id6">定制请求头</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html#post">更加复杂的 POST 请求</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html#post-multipart-encoded">POST一个多部分编码(Multipart-Encoded)的文件</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html#id7">响应状态码</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html#id8">响应头</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html#cookie">Cookie</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html#id9">重定向与请求历史</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html#id10">超时</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html#id11">错误与异常</a></li></ul></li><li>高级用法<ul><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#session-objects">会话对象</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#request-and-response-objects">请求与响应对象</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#prepared-request">准备的请求 （Prepared Request）</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#ssl">SSL 证书验证</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#id4">客户端证书</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#ca">CA 证书</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#body-content-workflow">响应体内容工作流</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#keep-alive">保持活动状态（持久连接）</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#streaming-uploads">流式上传</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#chunk-encoding">块编码请求</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#post">POST 多个分块编码的文件</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#event-hooks">事件挂钩</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#custom-auth">自定义身份验证</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#streaming-requests">流式请求</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#proxies">代理</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#compliance">合规性</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#http">HTTP动词</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#id17">定制动词</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#link-headers">响应头链接字段</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#transport-adapters">传输适配器</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#blocking-or-nonblocking">阻塞和非阻塞</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#header">Header 排序</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/advanced.html#timeout">超时（timeout）</a></li></ul></li><li>身份认证<ul><li><a href="https://docs.python-requests.org/zh_CN/latest/user/authentication.html#id2">基本身份认证</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/authentication.html#id3">摘要式身份认证</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/authentication.html#oauth-1">OAuth 1 认证</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/authentication.html#oauth-2-openid">OAuth 2 与 OpenID 连接认证</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/authentication.html#id4">其他身份认证形式</a></li><li><a href="https://docs.python-requests.org/zh_CN/latest/user/authentication.html#id5">新的身份认证形式</a></li></ul></li></ul><hr><h2 id="Beautiful-Soup4"><a href="#Beautiful-Soup4" class="headerlink" title="Beautiful Soup4"></a>Beautiful Soup4</h2><p>官方文档：<a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#get-text">Beautiful Soup 4.4.0 文档 — Beautiful Soup 4.2.0 中文 文档</a></p><p><a href="https://www.cnblogs.com/linagcheng/p/10311181.html">爬虫（三）—— BeautifulSoup模块获取元素 - 凉城旧巷 - 博客园 (cnblogs.com)</a></p><p>Beautiful Soup 是一个可以从 HTML 或 XML 文件中提取数据的 Python 库。它能够通过你喜欢的转换器实现惯用的文档导航，查找，修改文档的方式。Beautiful Soup 会帮你节省数小时甚至数天的工作时间。</p><p>下表列出了主要的解析器,以及它们的优缺点:</p><table><thead><tr><th>解析器</th><th>使用方法</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>Python标准库</td><td><code>BeautifulSoup(markup, &quot;html.parser&quot;)</code></td><td>Python的内置标准库执行速度适中文档容错能力强</td><td>Python 2.7.3 or 3.2.2)前 的版本中文档容错能力差</td></tr><tr><td>lxml HTML 解析器</td><td><code>BeautifulSoup(markup, &quot;lxml&quot;)</code></td><td>速度快文档容错能力强</td><td>需要安装C语言库</td></tr><tr><td>lxml XML 解析器</td><td><code>BeautifulSoup(markup, [&quot;lxml-xml&quot;])</code>                            <code>BeautifulSoup(markup, &quot;xml&quot;)</code></td><td>速度快唯一支持XML的解析器</td><td>需要安装C语言库</td></tr><tr><td>html5lib</td><td><code>BeautifulSoup(markup, &quot;html5lib&quot;)</code></td><td>最好的容错性以浏览器的方式解析文档生成HTML5格式的文档</td><td>速度慢不依赖外部扩展</td></tr></tbody></table><img src="https://i.loli.net/2021/11/15/CvLOKMlxUptkq8d.png" alt="image-20210920163606911" style="zoom: 200%;" /><p>find_all( <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#id35">name</a> , <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#css">attrs</a> , <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#recursive">recursive</a> , <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#id36">string</a> , <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#keyword">**kwargs</a> )</p><p>find( <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#id35">name</a> , <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#css">attrs</a> , <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#recursive">recursive</a> , <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#id36">string</a> , <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#keyword">**kwargs</a> )</p><p><code>find_all()</code> 方法将返回文档中符合条件的所有tag,尽管有时候我们只想得到一个结果.比如文档中只有一个<body>标签,那么使用 <code>find_all()</code> 方法来查找<body>标签就不太合适, 使用 <code>find_all</code> 方法并设置 <code>limit=1</code> 参数不如直接使用 <code>find()</code> 方法.</p><ol><li><p>格式化输出</p><p>prettify() 方法将Beautiful Soup的文档树格式化后以Unicode编码输出,每个XML/HTML标签都独占一行</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">markup = <span class="string">&#x27;&lt;a href=&quot;http://example.com/&quot;&gt;I linked to &lt;i&gt;example.com&lt;/i&gt;&lt;/a&gt;&#x27;</span>soup = BeautifulSoup(markup)soup.prettify()<span class="comment"># &#x27;&lt;html&gt;\n &lt;head&gt;\n &lt;/head&gt;\n &lt;body&gt;\n  &lt;a href=&quot;http://example.com/&quot;&gt;\n...&#x27;print(soup.prettify())# &lt;html&gt;#  &lt;head&gt;#  &lt;/head&gt;#  &lt;body&gt;#   &lt;a href=&quot;http://example.com/&quot;&gt;#    I linked to#    &lt;i&gt;#     example.com#    &lt;/i&gt;#   &lt;/a&gt;#  &lt;/body&gt;# &lt;/html&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>get_text()</li></ol><p><img src="https://i.loli.net/2021/11/15/mq2x1jsKi4ItPTN.png" alt="image-20210822190758421"></p><hr><p><strong>查找元素的方法</strong></p><h3 id="1-原生方法"><a href="#1-原生方法" class="headerlink" title="1.原生方法"></a>1.原生方法</h3><h3 id="2-和re结合"><a href="#2-和re结合" class="headerlink" title="2.和re结合"></a>2.和re结合</h3><h3 id="3-和xpath结合"><a href="#3-和xpath结合" class="headerlink" title="3.和xpath结合"></a>3.和xpath结合</h3><h3 id="4-和css结合"><a href="#4-和css结合" class="headerlink" title="4.和css结合"></a>4.和css结合</h3><p>Beautiful Soup支持大部分的CSS选择器 <a href="http://www.w3.org/TR/CSS2/selector.html">http://www.w3.org/TR/CSS2/selector.html</a> [<a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#id93">6]</a> , 在 <code>Tag</code> 或 <code>BeautifulSoup</code> 对象的 <code>.select()</code> 方法中传入字符串参数, 即可使用CSS选择器的语法找到tag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(&quot;title&quot;)# [&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;]soup.select(&quot;p nth-of-type(3)&quot;)# [&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;]</span><br></pre></td></tr></table></figure><p>通过tag标签逐层查找:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(&quot;body a&quot;)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot;  id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]soup.select(&quot;html head title&quot;)# [&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;]</span><br></pre></td></tr></table></figure><p>找到某个tag标签下的直接子标签 [<a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#id93">6]</a> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(&quot;head &gt; title&quot;)# [&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;]soup.select(&quot;p &gt; a&quot;)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot;  id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]soup.select(&quot;p &gt; a:nth-of-type(2)&quot;)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]soup.select(&quot;p &gt; #link1&quot;)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;]soup.select(&quot;body &gt; a&quot;)# []</span><br></pre></td></tr></table></figure><p>找到兄弟节点标签:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(&quot;#link1 ~ .sister&quot;)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot;  id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]soup.select(&quot;#link1 + .sister&quot;)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]</span><br></pre></td></tr></table></figure><p>通过CSS的类名查找:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(&quot;.sister&quot;)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]soup.select(&quot;[class~=sister]&quot;)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span><br></pre></td></tr></table></figure><p>通过tag的id查找:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(&quot;#link1&quot;)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;]soup.select(&quot;a#link2&quot;)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]</span><br></pre></td></tr></table></figure><p>同时用多种CSS选择器查询元素:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(&quot;#link1,#link2&quot;)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]</span><br></pre></td></tr></table></figure><p>通过是否存在某个属性来查找:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(&#x27;a[href]&#x27;)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span><br></pre></td></tr></table></figure><p>通过属性的值来查找:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(&#x27;a[href=&quot;http://example.com/elsie&quot;]&#x27;)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;]soup.select(&#x27;a[href^=&quot;http://example.com/&quot;]&#x27;)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]soup.select(&#x27;a[href$=&quot;tillie&quot;]&#x27;)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]soup.select(&#x27;a[href*=&quot;.com/el&quot;]&#x27;)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;]</span><br></pre></td></tr></table></figure><p>通过语言设置来查找:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multilingual_markup = &quot;&quot;&quot; &lt;p lang=&quot;en&quot;&gt;Hello&lt;/p&gt; &lt;p lang=&quot;en-us&quot;&gt;Howdy, y&#x27;all&lt;/p&gt; &lt;p lang=&quot;en-gb&quot;&gt;Pip-pip, old fruit&lt;/p&gt; &lt;p lang=&quot;fr&quot;&gt;Bonjour mes amis&lt;/p&gt;&quot;&quot;&quot;multilingual_soup = BeautifulSoup(multilingual_markup)multilingual_soup.select(&#x27;p[lang|=en]&#x27;)# [&lt;p lang=&quot;en&quot;&gt;Hello&lt;/p&gt;,#  &lt;p lang=&quot;en-us&quot;&gt;Howdy, y&#x27;all&lt;/p&gt;,#  &lt;p lang=&quot;en-gb&quot;&gt;Pip-pip, old fruit&lt;/p&gt;]</span><br></pre></td></tr></table></figure><p>返回查找到的元素的第一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select_one(&quot;.sister&quot;)# &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>对于熟悉CSS选择器语法的人来说这是个非常方便的方法.Beautiful Soup也支持CSS选择器API, 如果你仅仅需要CSS选择器的功能,那么直接使用 <code>lxml</code> 也可以, 而且速度更快,支持更多的CSS选择器语法,但Beautiful Soup整合了CSS选择器的语法和自身方便使用API.</p><h2 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h2><p><a href="https://www.w3school.com.cn/xpath/index.asp">https://www.w3school.com.cn/xpath/index.asp</a></p><p>常用规则：</p><table><thead><tr><th align="left">表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">nodename</td><td align="left">选取此节点的所有子节点</td></tr><tr><td align="left">/</td><td align="left">从当前节点选区直接子节点</td></tr><tr><td align="left">//</td><td align="left">从当前节点选取子孙节点</td></tr><tr><td align="left">.</td><td align="left">选取当前节点</td></tr><tr><td align="left">..</td><td align="left">选取当前节点的父节点</td></tr><tr><td align="left">@</td><td align="left">选取属性</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etreetext = <span class="string">&#x27;&#x27;&#x27;&lt;div&gt;&lt;ul&gt;&lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/ul&gt;&lt;/div&gt;&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="re正则表达式"><a href="#re正则表达式" class="headerlink" title="re正则表达式"></a><strong>re正则表达式</strong></h2><p><a href="https://www.cnblogs.com/chengege/p/11190782.html">https://www.cnblogs.com/chengege/p/11190782.html</a></p><p><strong>(匹配单个字符)</strong></p><ol><li>. 匹配任意字符(不包括换行符)</li><li>\d 任意数字==[0-9]</li><li>\D 任意非数字==[^0-9]</li><li>\s 空白字符</li><li>\w 单词字符和下划线 ==[ 0-9a-zA-Z_] </li><li>\W 与 \w相反</li><li>[] 组合方式，匹配中括号里面的字符</li></ol><p><strong>(匹配多个字符)</strong></p><ol><li>* 任意多个字符</li><li>+ 匹配一个以上的字符</li><li>？0或1个</li><li>{m}匹配m个</li><li>{m,n} m~n个</li></ol><p>（特殊符号）</p><hr><ol><li>^ 脱字符：表示以……开始</li><li>$ 以……结束</li><li>|匹配多个表达式或字符</li><li>贪婪模式和非贪婪模式</li></ol><p><strong>（常用函数）</strong></p><ol><li>match从头开始</li><li>search任意位置开始</li><li>分组group groups</li><li>findall 全部查找出来( re.DOTALL 可以匹配所以字符包括换行符)</li><li>sub用来替换字符串</li><li>split分割</li><li>compile编译(re.VERBOSE可以注释)</li></ol><p>爬古诗文网（案例）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> reimport requestsdef parse_page(url):    headers = &#123;        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&quot;</span>    &#125;    r=requests.get(url,headers=headers)    <span class="comment"># print(r.text)    text=r.text    titles=re.findall(r&#x27;&lt;div class=&quot;cont&quot;&gt;.*?&lt;b&gt;(.*?)&lt;/b&gt;&#x27;,text,re.DOTALL)#re.DOTALL    # print(titles)    dynasties=re.findall(r&#x27;&lt;p class=&quot;source&quot;&gt;.*?&lt;a.*?&gt;(.*?)&lt;/a&gt;&#x27;,text,re.DOTALL)    # print(dynasties)    authors=re.findall(r&#x27;&lt;p class=&quot;source&quot;&gt;.*?&lt;a.*?&gt;.*?&lt;a.*?&gt;(.*?)&lt;/a&gt;&#x27;,text,re.DOTALL)    # print(authors)    contents_tags=re.findall(r&#x27;&lt;div class=&quot;contson&quot; .*?&gt;(.*?)&lt;/div&gt;&#x27;,text,re.DOTALL)    contents=[]    for content in contents_tags:#第一句在div里，剩余的在&lt;p&gt;标签下        x=re.sub(r&#x27;&lt;.*?&gt;&#x27;,&quot;&quot;,content)        contents.append(x.strip()) #去空格创建一个诗歌内容的表格    poems = [] #解包后所有内容都在这里    for value in zip(titles,dynasties,authors,contents):        title,dynasty,author,content=value #解包        poem=&#123;            &#x27;title&#x27;:title,            &#x27;dynasty&#x27;:dynasty,            &#x27;author&#x27;:author,            &#x27;poem&#x27;:content        &#125;        poems.append(poem)    for poem in poems:        print(poem)        print(&#x27;-&#x27;*20)def mian():    # url=&#x27;https://www.gushiwen.org/default_1.aspx&#x27;    for x in range(1,11):        url=&#x27;https://www.gushiwen.org/default_%s.aspx&#x27; % x        parse_page(url)if __name__ == &#x27;__main__&#x27;:    mian()</span></span><br></pre></td></tr></table></figure><h2 id="css-selector"><a href="#css-selector" class="headerlink" title="css selector"></a>css selector</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors">CSS 选择器 - CSS（层叠样式表） | MDN (mozilla.org)</a></p><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors#%E5%9F%BA%E6%9C%AC%E9%80%89%E6%8B%A9%E5%99%A8">基本选择器</a></h2><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Universal_selectors">通用选择器</a>（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Universal_selectors">Universal selector</a>）</p><p>选择所有元素。（可选）可以将其限制为特定的名称空间或所有名称空间。 <strong>语法：</strong><code>*</code> <code>ns|*</code> <code>*|*</code> <strong>例子：</strong><code>*</code> 将匹配文档的所有元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Type_selectors">元素选择器</a>（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Type_selectors">Type selector</a>）</p><p>按照给定的节点名称，选择所有匹配的元素。 <strong>语法：</strong><code>elementname</code> <strong>例子：</strong><code>input</code> 匹配任何 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input">``</a> 元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Class_selectors">类选择器</a>（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Class_selectors">Class selector</a>）</p><p>按照给定的 <code>class</code> 属性的值，选择所有匹配的元素。 <strong>语法</strong>：<code>.classname</code> <strong>例子</strong>：<code>.index</code> 匹配任何 <code>class</code> 属性中含有 “index” 类的元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/ID_selectors">ID 选择器</a>（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/ID_selectors">ID selector</a>）</p><p>按照 <code>id</code> 属性选择一个与之匹配的元素。需要注意的是，一个文档中，每个 ID 属性都应当是唯一的。 <strong>语法：</strong><code>#idname</code> <strong>例子：</strong><code>#toc</code> 匹配 ID 为 “toc” 的元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors">属性选择器</a>（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors">Attribute selector</a>）</p><p>按照给定的属性，选择所有匹配的元素。 <strong>语法：</strong><code>[attr]</code> <code>[attr=value]</code> <code>[attr~=value]</code> <code>[attr|=value]</code> <code>[attr^=value]</code> <code>[attr$=value]</code> <code>[attr*=value]</code> <strong>例子：</strong><code>[autoplay]</code> 选择所有具有 <code>autoplay</code> 属性的元素（不论这个属性的值是什么）。</p></li></ul><h2 id="分组选择器（Grouping-selectors）"><a href="#分组选择器（Grouping-selectors）" class="headerlink" title="分组选择器（Grouping selectors）"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors#%E5%88%86%E7%BB%84%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%88grouping_selectors%EF%BC%89">分组选择器（Grouping selectors）</a></h2><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Selector_list">选择器列表</a>（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Selector_list">Selector list</a>）</p><p><code>,</code> 是将不同的选择器组合在一起的方法，它选择所有能被列表中的任意一个选择器选中的节点。 <strong>语法</strong>：<code>A, B</code> <strong>示例</strong>：<code>div, span</code> 会同时匹配 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/span">``</a> 元素和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/div">``</a> 元素和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/div">``</a> 元素和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/div">``</a> 元素。</p></li></ul><h2 id="组合器（Combinators）"><a href="#组合器（Combinators）" class="headerlink" title="组合器（Combinators）"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors#%E7%BB%84%E5%90%88%E5%99%A8%EF%BC%88combinators%EF%BC%89">组合器（Combinators）</a></h2><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Descendant_combinator">后代组合器</a>（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Descendant_combinator">Descendant combinator</a>）</p><p><code> </code>（空格）组合器选择前一个元素的后代节点。 <strong>语法：</strong><code>A B</code> <strong>例子：</strong><code>div span</code> 匹配所有位于任意 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/div">``</a> 元素之内的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/span">``</a> 元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Child_combinator">直接子代组合器</a>（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Child_combinator">Child combinator</a>）</p><p><code>&gt;</code> 组合器选择前一个元素的直接子代的节点。 <strong>语法</strong>：<code>A &gt; B</code> <strong>例子</strong>：<code>ul &gt; li</code> 匹配直接嵌套在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/ul">``</a> 元素内的所有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/li">``</a> 元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/General_sibling_combinator">一般兄弟组合器</a>（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/General_sibling_combinator">General sibling combinator</a>）</p><p><code>~</code> 组合器选择兄弟元素，也就是说，后一个节点在前一个节点后面的任意位置，并且共享同一个父节点。 <strong>语法</strong>：<code>A ~ B</code> <strong>例子</strong>：<code>p ~ span</code> 匹配同一父元素下，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/p">``</a> 元素后的所有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/span">``</a> 元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Adjacent_sibling_combinator">紧邻兄弟组合器</a>（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Adjacent_sibling_combinator">Adjacent sibling combinator</a>）</p><p><code>+</code> 组合器选择相邻元素，即后一个元素紧跟在前一个之后，并且共享同一个父节点。 <strong>语法：</strong><code>A + B</code> <strong>例子：</strong><code>h2 + p</code> 会匹配所有紧邻在 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements"> (en-US)</a> 元素后的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/p">``</a> 元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Column_combinator">列组合器</a>（<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Column_combinator">Column combinator</a>）</p><p><code>||</code> 组合器选择属于某个表格行的节点。 <strong>语法：</strong> <code>A || B</code> <strong>例子：</strong> <code>col || td</code> 会匹配所有 作用域内的 `](<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/td">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/td</a>) 元素。</p></li></ul><h2 id="伪选择器（Pseudo）"><a href="#伪选择器（Pseudo）" class="headerlink" title="伪选择器（Pseudo）"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors#%E4%BC%AA%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%88pseudo%EF%BC%89">伪选择器（Pseudo）</a></h2><p><img src="https://i.loli.net/2021/11/15/AUELXF9jqxVyaDC.png" alt="image-20210822195103270"></p><p>#contentEl &gt; div.unreach.w-full &gt; p:nth-child(11)</p><p>#app &gt; div.w-full.h-full.flex.relative &gt; div.flex-none.bg-white.flex.flex-col.transition-all &gt; div.relative &gt; div &gt; span</p><hr><h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><p><a href="https://www.selenium.dev/documentation/zh-cn/getting_started/%EF%BC%88%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%EF%BC%89">https://www.selenium.dev/documentation/zh-cn/getting_started/（中文文档）</a></p><p><a href="https://python-selenium-zh.readthedocs.io/zh_CN/latest/">selenium-python中文文档 (python-selenium-zh.readthedocs.io)</a></p><p>配置：</p><p>下载相应的webdriver（chromedriver\geckodriver…)放到python根目录下</p><p>功能：</p><ul><li>框架底层使用JavaScript模拟真实用户对浏览器进行操作。测试脚本执行时，浏览器自动按照脚本代码做出点击，输入，打开，验证等操作，就像真实用户所做的一样，从终端用户的角度测试应用程序。</li><li>使浏览器兼容性测试自动化成为可能，尽管在不同的浏览器上依然有细微的差别。</li><li>使用简单，可使用Java，Python等多种语言编写用例脚本。</li></ul><p>使用：</p><h3 id="1-关闭页面"><a href="#1-关闭页面" class="headerlink" title="1.关闭页面"></a>1.关闭页面</h3><p>driver.close()</p><p>#关闭当前页面，如果只有一个页面，会关闭浏览器</p><p>driver.quit()</p><p>#关闭浏览器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timefrom selenium <span class="keyword">import</span> webdriverdrive_path=<span class="string">r&#x27;C:\Users\Lenovo\AppData\Local\Programs\Python\Python38\geckodriver.exe&#x27;</span>driver=webdriver.Firefox(executable_path=drive_path)driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)time.sleep(<span class="number">3</span>)driver.close()<span class="comment">#当前选项卡#driver.quit()#退出浏览器</span></span><br></pre></td></tr></table></figure><h3 id="2-定位UI元素-WebElements"><a href="#2-定位UI元素-WebElements" class="headerlink" title="2.定位UI元素 (WebElements)"></a>2.定位UI元素 (WebElements)</h3><p>关于元素的选取，有如下的API 单个元素选取:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_idfind_elements_by_namefind_elements_by_xpathfind_elements_by_link_textfind_elements_by_partial_link_textfind_elements_by_tag_namefind_elements_by_class_namefind_elements_by_css_selector</span><br></pre></td></tr></table></figure><p>​    （find_element….获取第一个、find_elements….获取全部）</p><p>1.操作输入框</p><p>下面这个例子会自动打开火狐并在<u>输入框</u>内输入test：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriverdrive_path=<span class="string">r&#x27;C:\Users\Lenovo\AppData\Local\Programs\Python\Python38\geckodriver.exe&#x27;</span>driver=webdriver.Firefox(executable_path=drive_path)driver.get(<span class="string">&quot;https://cn.bing.com/&quot;</span>)<span class="comment">#print(driver.page_source)  #driver.page_source获取源代码input_tag=driver.find_element_by_id(&#x27;sb_form_q&#x27;) # input_tag=driver.find_element_by_class_name(&#x27;b_searchbox&#x27;)#input_tag=driver.find_element_by_xpath(&quot;//input[@id=&#x27;sb_form_q&#x27;]&quot;)input_tag.send_keys(&#x27;test&#x27;)</span></span><br></pre></td></tr></table></figure><p>也可以用(不好用)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br></pre></td></tr></table></figure><p>2.操作checkbox</p><p>在上面代码的基础上可以自动点击搜索按钮button</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriverdrive_path=<span class="string">r&#x27;C:\Users\Lenovo\AppData\Local\Programs\Python\Python38\geckodriver.exe&#x27;</span>driver=webdriver.Firefox(executable_path=drive_path)driver.get(<span class="string">&quot;https://www.baidu.com/index.php?tn=monline_3_dg&quot;</span>)input_tag=driver.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>)input_tag.send_keys(<span class="string">&#x27;test&#x27;</span>)rememberBtn=driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br></pre></td></tr></table></figure><p>3.select</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;status&quot;</span> <span class="class"><span class="keyword">class</span>=&quot;<span class="title">form</span>-<span class="title">control</span> <span class="title">valid</span>&quot; <span class="title">onchange</span>=&quot;&quot; <span class="title">name</span>=&quot;<span class="title">status</span>&quot;&gt;    &lt;<span class="title">option</span> <span class="title">value</span>=&quot;&quot;&gt;&lt;/<span class="title">option</span>&gt;    &lt;<span class="title">option</span> <span class="title">value</span>=&quot;0&quot;&gt;未审核&lt;/<span class="title">option</span>&gt;    &lt;<span class="title">option</span> <span class="title">value</span>=&quot;1&quot;&gt;初审通过&lt;/<span class="title">option</span>&gt;    &lt;<span class="title">option</span> <span class="title">value</span>=&quot;2&quot;&gt;复审通过&lt;/<span class="title">option</span>&gt;    &lt;<span class="title">option</span> <span class="title">value</span>=&quot;3&quot;&gt;审核不通过&lt;/<span class="title">option</span>&gt;&lt;/<span class="title">select</span>&gt;# 导入 <span class="title">Select</span> 类<span class="title">from</span> <span class="title">selenium</span>.<span class="title">webdriver</span>.<span class="title">support</span>.<span class="title">ui</span> <span class="title">import</span> <span class="title">Select</span># 找到 <span class="title">name</span> 的选项卡<span class="title">select</span> = <span class="title">Select</span>(<span class="params">driver.find_element_by_name(<span class="params"><span class="string">&#x27;status&#x27;</span></span>)</span>)# <span class="title">select</span>.<span class="title">select_by_index</span>(<span class="params"><span class="number">1</span></span>)<span class="title">select</span>.<span class="title">select_by_value</span>(<span class="params"><span class="string">&quot;0&quot;</span></span>)<span class="title">select</span>.<span class="title">select_by_visible_text</span>(<span class="params"><span class="string">u&quot;未审核&quot;</span></span>)</span></span><br></pre></td></tr></table></figure><h3 id="3-鼠标动作链"><a href="#3-鼠标动作链" class="headerlink" title="3.鼠标动作链"></a>3.鼠标动作链</h3><p>有些时候，我们需要再页面上模拟一些鼠标操作，比如双击、右击、拖拽甚至按住不动等，我们可以通过导入 ActionChains 类来做到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriverfrom selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChainsdrive_path=<span class="string">r&#x27;C:\Users\Lenovo\AppData\Local\Programs\Python\Python38\geckodriver.exe&#x27;</span>driver=webdriver.Firefox(executable_path=drive_path)driver.get(<span class="string">&quot;https://www.baidu.com/?tn=monline_3_dg&quot;</span>)actions=ActionChains(driver)<span class="comment">#把driver传入ActionChains类input_tag=driver.find_element_by_id(&#x27;kw&#x27;)check_tag=driver.find_element_by_id(&#x27;su&#x27;)actions.send_keys_to_element(input_tag,&#x27;腾讯新闻&#x27;)actions.move_to_element(check_tag).click()actions.perform() #执行上面的行为链</span></span><br></pre></td></tr></table></figure><h3 id="4-获取cookies信息"><a href="#4-获取cookies信息" class="headerlink" title="4.获取cookies信息"></a>4.获取cookies信息</h3><p>（1）获取所有的cookies</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> cookies <span class="keyword">in</span> driver.get_cookies():    <span class="built_in">print</span>(cookies)</span><br></pre></td></tr></table></figure><p>（2）根据key获取对应的value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value=driver.get_cookie(key)</span><br></pre></td></tr></table></figure><p>（3）删除cookies信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.delete_all_cookies()<span class="comment">#所有的driver.delete_cookie(key) #key对应的</span></span><br></pre></td></tr></table></figure><h3 id="5-页面等待"><a href="#5-页面等待" class="headerlink" title="5.页面等待"></a>5.页面等待</h3><p>现在的网页越来越多采用了 Ajax 技术，这样程序便不能确定何时某个元素完全加载出来了。如果实际页面等待时间过长导致某个dom元素还没出来，但是你的代码直接使用了这个WebElement，那么就会抛出NullPointer的异常。</p><p>为了避免这种元素定位困难而且会提高产生 ElementNotVisibleException 的概率。所以 Selenium 提供了两种等待方式，一种是隐式等待，一种是显式等待。</p><p>隐式等待是等待特定的时间，显式等待是指定某一条件直到这个条件成立时继续执行。</p><h4 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h4><p>显式等待指定某个条件，然后设置最长等待时间。如果在这个时间还没有找到元素，那么便会抛出异常了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriverfrom selenium.webdriver.common.by <span class="keyword">import</span> By<span class="comment"># WebDriverWait 库，负责循环等待from selenium.webdriver.support.ui import WebDriverWait# expected_conditions 类，负责条件出发from selenium.webdriver.support import expected_conditions as ECdrive_path=r&#x27;C:\Users\Lenovo\AppData\Local\Programs\Python\Python38\geckodriver.exe&#x27;driver=webdriver.Firefox(executable_path=drive_path)driver.get(&quot;https://www.selenium.dev/&quot;)# driver.implicitly_wait(10)#等待时间try:    # 页面一直循环，直到 id=&quot;myDynamicElement&quot; 出现    element = WebDriverWait(driver, 10).until(        EC.presence_of_element_located((By.ID, &quot;myDynamicElement&quot;))    )finally:    driver.quit()</span></span><br></pre></td></tr></table></figure><p>如果不写参数，程序默认会 0.5s 调用一次来查看元素是否已经生成，如果本来元素就是存在的，那么会立即返回。</p><p>下面是一些内置的等待条件，你可以直接调用这些条件，而不用自己写某些等待条件了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title_istitle_containspresence_of_element_locatedvisibility_of_element_locatedvisibility_ofpresence_of_all_elements_locatedtext_to_be_present_in_elementtext_to_be_present_in_element_valueframe_to_be_available_and_switch_to_itinvisibility_of_element_locatedelement_to_be_clickable – it <span class="keyword">is</span> Displayed <span class="keyword">and</span> Enabled.staleness_ofelement_to_be_selectedelement_located_to_be_selectedelement_selection_state_to_beelement_located_selection_state_to_bealert_is_present</span><br></pre></td></tr></table></figure><h4 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h4><p>隐式等待比较简单，就是简单地设置一个等待时间，单位为秒。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriverdriver = webdriver.Chrome()driver.implicitly_wait(<span class="number">10</span>) <span class="comment"># secondsdriver.get(&quot;http://www.xxxxx.com/loading&quot;)myDynamicElement = driver.find_element_by_id(&quot;myDynamicElement&quot;)</span></span><br></pre></td></tr></table></figure><p>当然如果不设置，默认等待时间为0。</p><h3 id="6-页面切换"><a href="#6-页面切换" class="headerlink" title="6.页面切换"></a>6.页面切换</h3><p>一个浏览器肯定会有很多窗口，所以我们肯定要有方法来实现窗口的切换。切换窗口的方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switch_to.window(<span class="string">&quot;this is window name&quot;</span>)</span><br></pre></td></tr></table></figure><p>也可以使用 window_handles 方法来获取每个窗口的操作对象。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> driver.window_handles:    driver.switch_to_window(handle)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriverdrive_path=<span class="string">r&#x27;C:\Users\Lenovo\AppData\Local\Programs\Python\Python38\geckodriver.exe&#x27;</span>driver=webdriver.Firefox(executable_path=drive_path)driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)driver.execute_script(<span class="string">&quot;window.open(&#x27;https://www.douban.com/&#x27;)&quot;</span>)<span class="comment">#打开新的窗口driver.switch_to.window(driver.window_handles[0])#返回第一个窗口print(driver.current_url)</span></span><br></pre></td></tr></table></figure><h3 id="7-页面前进和后退"><a href="#7-页面前进和后退" class="headerlink" title="7.页面前进和后退"></a>7.页面前进和后退</h3><p>操作页面的前进和后退功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.forward()     <span class="comment">#前进driver.back()        # 后退</span></span><br></pre></td></tr></table></figure><h3 id="8-弹窗处理"><a href="#8-弹窗处理" class="headerlink" title="8.弹窗处理"></a>8.弹窗处理</h3><p>当你触发了某个事件之后，页面出现了弹窗提示，处理这个提示或者获取提示信息方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert = driver.switch_to_alert()</span><br></pre></td></tr></table></figure><h3 id="9-代理"><a href="#9-代理" class="headerlink" title="9.代理"></a>9.代理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriverdrive_path=<span class="string">r&#x27;C:\Users\Lenovo\AppData\Local\Programs\Python\Python38\geckodriver.exe&#x27;</span>options=webdriver.FirefoxOptions()options.add_argument(<span class="string">&quot;--proxy--sever=http://36.248.133.189:9999&quot;</span>)driver=webdriver.Firefox(executable_path=drive_path,options=options)driver.get(<span class="string">&quot;https://httpbin.org/ip&quot;</span>) <span class="comment">#httpbin</span></span><br></pre></td></tr></table></figure><h3 id="10-options"><a href="#10-options" class="headerlink" title="10.options"></a>10.options</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">–user-data-dir=”[PATH]” 指定用户文件夹User Data路径，可以把书签这样的用户数据保存在系统分区以外的分区。–disk-cache-dir=”[PATH]“ 指定缓存Cache路径–disk-cache-size= 指定Cache大小，单位Byte–first run 重置到初始状态，第一次运行–incognito 隐身模式启动–disable-javascript 禁用Javascript–omnibox-popup-count=”num” 将地址栏弹出的提示菜单数量改为num个。我都改为15个了。–user-agent=”xxxxxxxx” 修改HTTP请求头部的Agent字符串，可以通过about:version页面查看修改效果–disable-plugins 禁止加载所有插件，可以增加速度。可以通过about:plugins页面查看效果–disable-javascript 禁用JavaScript，如果觉得速度慢在加上这个–disable-java 禁用java–start-maximized 启动就最大化–no-sandbox 取消沙盒模式–single-process 单进程运行–process-per-tab 每个标签使用单独进程–process-per-site 每个站点使用单独进程–in-process-plugins 插件不启用单独进程–disable-popup-blocking 禁用弹出拦截–disable-plugins 禁用插件–disable-images 禁用图像–incognito 启动进入隐身模式–enable-udd-profiles 启用账户切换菜单–proxy-pac-url 使用pac代理 [via 1/2]–lang=zh-CN 设置语言为简体中文–disk-cache-dir 自定义缓存目录–disk-cache-size 自定义缓存最大值（单位byte）–media-cache-size 自定义多媒体缓存最大值（单位byte）–bookmark-menu 在工具 栏增加一个书签按钮–enable-sync 启用书签同步–single-process 单进程运行Google Chrome–start-maximized 启动Google Chrome就最大化–disable-java 禁止Java–no-sandbox 非沙盒模式运行</span><br></pre></td></tr></table></figure><h1 id="词云"><a href="#词云" class="headerlink" title="词云"></a>词云</h1><h2 id="1-stylecloud"><a href="#1-stylecloud" class="headerlink" title="1.stylecloud"></a>1.stylecloud</h2><p><a href="https://blog.csdn.net/weixin_38008864/article/details/107194187">(16条消息) stylecloud:简洁易用的词云库_大邓和他的Python-CSDN博客</a></p><p>1.stylecloud参数介绍</p><p>file_path：CSV的文件路径,需要注意的是csv文件格式为两列(word, freq)</p><p>size：词云图尺寸[默认值:512]</p><p>custom_stopwords：自定义停用词列表</p><p>output_name：输出的词云图路径</p><p>font_path：字体路径</p><p>icon_name：图标名（fas fa-iconname）只需要改iconname,[默认值: fas fa-flag]</p><p>palette：调色板（通过 palettable 实现）[默认值:cartocolors.qualitative.Bold_6]</p><p>background_color：词云图背景色[默认值:white]</p><p>max_font_size：词云图最大字号[默认值:200]</p><p>random_state：控制单词和颜色的随机状态,如不设置，每次运行的效果会发生变化</p><p><strong>图形设置</strong></p><p>icon_name参数的模板【fas fa-iconname】只需要改动iconname即可。</p><p>iconname并不是随便起的，必须能在<a href="https://fontawesome.com/license/free">https://fontawesome.com/license/free</a> 搜到才可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> stylecloudstopwords = <span class="built_in">open</span>(<span class="string">&#x27;data/stopwords.txt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>).read().split(<span class="string">&#x27;\n&#x27;</span>) stylecloud.gen_stylecloud(file_path=<span class="string">&#x27;data/高考.csv&#x27;</span>,                          font_path=<span class="string">&#x27;data/SourceHanSansCN-Regular.otf&#x27;</span>,                          output_name=<span class="string">&#x27;output/高考2.png&#x27;</span>,                          icon_name=<span class="string">&#x27;fas fa-user-graduate&#x27;</span>,                          size=<span class="number">500</span>,                          custom_stopwords=stopwords)</span><br></pre></td></tr></table></figure><h2 id="2-wordcloud"><a href="#2-wordcloud" class="headerlink" title="2.wordcloud"></a>2.wordcloud</h2><p>whl：<a href="https://pypi.org/project/wordcloud/#files">wordcloud · PyPI</a></p><p><a href="https://blog.csdn.net/skylibiao/article/details/89702746">(28条消息) wordcloud使用教程_一条coding-CSDN博客_wordcloud</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud, ImageColorGenerator, STOPWORDS</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordyun</span>():</span></span><br><span class="line"> <span class="comment">#导入背景图   </span></span><br><span class="line">backgrim=np.array(Image.<span class="built_in">open</span>(<span class="string">&quot;C:\\Users\SAMSUNG\PycharmProjects\practice0829\qqzon\\bg.jpg&quot;</span>))</span><br><span class="line"> <span class="comment">#导入文本文件   text=open(&quot;C:\\Users\SAMSUNG\PycharmProjects\practice0829\qqzon\\1154540719worldcloud.txt&quot;,encoding=&#x27;utf-8&#x27;).read()</span></span><br><span class="line">    <span class="comment">#jieba分词</span></span><br><span class="line">    wordlist = jieba.cut(text, cut_all=<span class="literal">True</span>)</span><br><span class="line">    wl = <span class="string">&quot; &quot;</span>.join(wordlist)</span><br><span class="line"><span class="comment">#设置参数</span></span><br><span class="line">    wordcloud=WordCloud(</span><br><span class="line">        background_color=<span class="string">&#x27;white&#x27;</span>,  <span class="comment">#背景颜色</span></span><br><span class="line">        mask=backgrim ,   <span class="comment">#背景图片</span></span><br><span class="line">        max_words = <span class="number">300</span>,  <span class="comment"># 设置最多现实的词数</span></span><br><span class="line">        stopwords=STOPWORDS,  <span class="comment"># 设置停用词</span></span><br><span class="line">        max_font_size=<span class="number">200</span>,    <span class="comment"># 设置字体最大值</span></span><br><span class="line">        font_path=<span class="string">&#x27;C:/Users/Windows/fonts/STXINGKA.TTF&#x27;</span>,<span class="comment">#设置字体，路径在电脑内</span></span><br><span class="line">        width=<span class="number">1600</span>,</span><br><span class="line">        height=<span class="number">1000</span>,</span><br><span class="line">        random_state=<span class="number">30</span>,  <span class="comment"># 设置有多少种随机生成状态，即有多少种配色方案</span></span><br><span class="line">        <span class="comment"># scale=.5</span></span><br><span class="line">    ).generate(text)</span><br><span class="line"><span class="comment">#改变字体颜色</span></span><br><span class="line">    image_colors = ImageColorGenerator(backgrim)</span><br><span class="line"><span class="comment">#展示词云</span></span><br><span class="line">    plt.imshow(wordcloud)</span><br><span class="line"><span class="comment">#是否显示想x，y坐标</span></span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"><span class="comment">#写入文件</span></span><br><span class="line">    wordcloud.to_file(<span class="string">&#x27;py_book1.png&#x27;</span>)  <span class="comment"># 把词云保存下</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">wordyun()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相关参数</p><p>font_path : string //字体路径，需要展现什么字体就把该字体路径+后缀名写上，如：font_path = ‘黑体.ttf’</p><p>width : int (default=400) //输出的画布宽度，默认为400像素</p><p>height : int (default=200) //输出的画布高度，默认为200像素</p><p>prefer_horizontal : float (default=0.90) //词语水平方向排版出现的频率，默认 0.9 （所以词语垂直方向排版出现频率为 0.1 ）</p><p>mask : nd-array or None (default=None) //如果参数为空，则使用二维遮罩绘制词云。如果 mask 非空，设置的宽高值将被忽略，遮罩形状被 mask 取代。除全白（#FFFFFF）的部分将不会绘制，其余部分会用于绘制词云。如：bg_pic = imread(‘读取一张图片.png’)，背景图片的画布一定要设置为白色（#FFFFFF），然后显示的形状为不是白色的其他颜色。可以用ps工具将自己要显示的形状复制到一个纯白色的画布上再保存，就ok了。</p><p>scale : float (default=1) //按照比例进行放大画布，如设置为1.5，则长和宽都是原来画布的1.5倍。</p><p>min_font_size : int (default=4) //显示的最小的字体大小</p><p>font_step : int (default=1) //字体步长，如果步长大于1，会加快运算但是可能导致结果出现较大的误差。</p><p>max_words : number (default=200) //要显示的词的最大个数</p><p>stopwords : set of strings or None //设置需要屏蔽的词，如果为空，则使用内置的STOPWORDS</p><p>background_color : color value (default=”black”) //背景颜色，如background_color=’white’,背景颜色为白色。</p><p>max_font_size : int or None (default=None) //显示的最大的字体大小</p><p>mode : string (default=”RGB”) //当参数为“RGBA”并且background_color不为空时，背景为透明。</p><p>relative_scaling : float (default=.5) //词频和字体大小的关联性</p><p>color_func : callable, default=None //生成新颜色的函数，如果为空，则使用 self.color_func</p><p>regexp : string or None (optional) //使用正则表达式分隔输入的文本</p><p>collocations : bool, default=True //是否包括两个词的搭配</p><p>colormap : string or matplotlib colormap, default=”viridis” //给每个单词随机分配颜色，若指定color_func，则忽略该方法。</p><p>fit_words(frequencies)  //根据词频生成词云<br>generate(text)  //根据文本生成词云<br>generate_from_frequencies(frequencies[, …])   //根据词频生成词云<br>generate_from_text(text)    //根据文本生成词云<br>process_text(text)  //将长文本分词并去除屏蔽词（此处指英语，中文分词还是需要自己用别的库先行实现，使用上面的 fit_words(frequencies) ）<br>recolor([random_state, color_func, colormap])   //对现有输出重新着色。重新上色会比重新生成整个词云快很多。<br>to_array()  //转化为 numpy array<br>to_file(filename)   //输出到文件</p><h1 id="python内置模块"><a href="#python内置模块" class="headerlink" title="python内置模块"></a>python内置模块</h1><h2 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h2><p>Counter</p><p><code>Counter</code>是一个简单的计数器，例如，统计字符出现的个数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counterls=[<span class="string">&#x27;programming&#x27;</span>]       <span class="comment"># Counter(&#123;&#x27;programming&#x27;: 1&#125;)st=&#x27;programming&#x27;         #Counter(&#123;&#x27;r&#x27;: 2, &#x27;g&#x27;: 2, &#x27;m&#x27;: 2, &#x27;p&#x27;: 1, &#x27;o&#x27;: 1, &#x27;a&#x27;: 1, &#x27;i&#x27;: 1, &#x27;n&#x27;: 1&#125;)c=Counter(st)#lsprint(c)</span></span><br></pre></td></tr></table></figure><p><code>Counter</code>实际上也是<code>dict</code>的一个子类，上面的结果可以看出每个字符出现的次数。</p><h2 id="pyperclip"><a href="#pyperclip" class="headerlink" title="pyperclip"></a>pyperclip</h2><p>复制到粘贴板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyperclip</span><br><span class="line">number=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    number=number+<span class="built_in">str</span>(i)+<span class="string">&quot;\n&quot;</span></span><br><span class="line">pyperclip.copy(number)</span><br></pre></td></tr></table></figure><h2 id="random库"><a href="#random库" class="headerlink" title="random库"></a>random库</h2><p>1.random.random()</p><p> #用于生成一个0到1的</p><p>随机浮点数：0&lt;= n &lt; 1.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import random  </span><br><span class="line">a = random.random()</span><br><span class="line">print (a)  </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/30/OfzFaegt8Qp1cRd.png" alt="img"></p><p>2.random.uniform(a,b) </p><p>#用于生成一个指定范围内的随机符点数，两个参数其中一个是上限，一个是下限。如果a &gt; b，则生成的随机数n: b &lt;= n &lt;= a。如果 a &lt;b， 则 a &lt;= n &lt;= b。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import random  </span><br><span class="line">print(random.uniform(1,10))  </span><br><span class="line">print(random.uniform(10,1)) </span><br></pre></td></tr></table></figure><p> <img src="https://i.loli.net/2021/11/30/qkHOTPBDVGznbZ7.png" alt="img"></p><p>3.random.randint(a, b)</p><p> #用于生成一个指定范围内的整数。其中参数a是下限，参数b是上限，生成的随机数n: a &lt;= n &lt;= b</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import random  </span><br><span class="line">print(random.randint(1,10))  </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/30/dlcDLBE8uxZJhPr.png" alt="img"></p><p>4.random.randrange([start], stop[, step])</p><p> #从指定范围内，按指定基数递增的集合中 获取一个随机数。</p><p>random.randrange(10, 30, 2)，结果相当于从[10, 12, 14, 16, … 26, 28]序列中获取一个随机数。</p><p>random.randrange(10, 30, 2)在结果上与 random.choice(range(10, 30, 2) 等效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import random  </span><br><span class="line">print(random.randrange(10,30,2)) </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/30/mu7xOIbPtNvH3MK.png" alt="img"></p><p>5.random.choice(sequence)</p><p>#random.choice从序列中获取一个随机元素。其函数原型为：random.choice(sequence)。</p><p>参数sequence表示一个有序类型。这里要说明 一下：sequence在python不是一种特定的类型，而是泛指一系列的类型。list, tuple, 字符串都属于sequence。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">        </span><br><span class="line">print(random.choice(str1))  </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/30/7KETdH5ewUzRqGm.png" alt="img"></p><p>6.random.shuffle(x[, random])</p><p>#用于将一个列表中的元素打乱,即将列表内的元素随机排列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">p = [&#x27;A&#x27; , &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27; ]</span><br><span class="line">random.shuffle(p)  </span><br><span class="line">print (p)  </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/30/Z4foLGdSeu7VbgO.png" alt="img"></p><p>7.random.sample(sequence, k)</p><p>#从指定序列中随机获取指定长度的片断并随机排列。注意：sample函数不会修改原有序列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 import random   </span><br><span class="line">2 lst = [1,2,3,4,5]  </span><br><span class="line">3 print(random.sample(lst,4))  </span><br><span class="line">4 print(lst) </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/30/S7lFPTLKpcnOe2y.png" alt="img"></p><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p><a href="https://www.runoob.com/python3/python3-func-filter.html">Python3 filter() 函数 | 菜鸟教程 (runoob.com)</a> </p><p><strong>filter()</strong> 函数用于过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，可以使用 <strong>list()</strong> 来转换。该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判断，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。     </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">tmplist = <span class="built_in">filter</span>(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])</span><br><span class="line">newlist = <span class="built_in">list</span>(tmplist)</span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br></pre></td></tr></table></figure><h2 id="time和datetime"><a href="#time和datetime" class="headerlink" title="time和datetime"></a>time和datetime</h2><p>Time 模块包含了以下内置函数，既有时间处理的，也有转换时间格式的：</p><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-time-altzone.html">time.altzone</a> 返回格林威治西部的夏令时地区的偏移秒数。如果该地区在格林威治东部会返回负值（如西欧，包括英国）。对夏令时启用地区才能使用。</td></tr><tr><td align="left">2</td><td align="left">[time.asctime(<a href="https://www.runoob.com/python/att-time-asctime.html">tupletime])</a> 接受时间元组并返回一个可读的形式为”Tue Dec 11 18:07:14 2008”（2008年12月11日 周二18时07分14秒）的24个字符的字符串。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python/att-time-clock.html">time.clock( )</a> 用以浮点数计算的秒数返回当前的CPU时间。用来衡量不同程序的耗时，比time.time()更有用。</td></tr><tr><td align="left">4</td><td align="left">[time.ctime(<a href="https://www.runoob.com/python/att-time-ctime.html">secs])</a> 作用相当于asctime(localtime(secs))，未给参数相当于asctime()</td></tr><tr><td align="left">5</td><td align="left">[time.gmtime(<a href="https://www.runoob.com/python/att-time-gmtime.html">secs])</a> 接收时间戳（1970纪元后经过的浮点秒数）并返回格林威治天文时间下的时间元组t。注：t.tm_isdst始终为0</td></tr><tr><td align="left">6</td><td align="left">[time.localtime(<a href="https://www.runoob.com/python/att-time-localtime.html">secs])</a> 接收时间戳（1970纪元后经过的浮点秒数）并返回当地时间下的时间元组t（t.tm_isdst可取0或1，取决于当地当时是不是夏令时）。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python/att-time-mktime.html">time.mktime(tupletime)</a> 接受时间元组并返回时间戳（1970纪元后经过的浮点秒数）。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python/att-time-sleep.html">time.sleep(secs)</a> 推迟调用线程的运行，secs指秒数。</td></tr><tr><td align="left">9</td><td align="left">[time.strftime(fmt<a href="https://www.runoob.com/python/att-time-strftime.html">,tupletime])</a> 接收以时间元组，并返回以可读字符串表示的当地时间，格式由fmt决定。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python/att-time-strptime.html">time.strptime(str,fmt=’%a %b %d %H:%M:%S %Y’)</a> 根据fmt的格式把一个时间字符串解析为时间元组。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python/att-time-time.html">time.time( )</a> 返回当前时间的时间戳（1970纪元后经过的浮点秒数）。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python/att-time-tzset.html">time.tzset()</a> 根据环境变量TZ重新初始化时间相关设置。</td></tr></tbody></table><p>Time模块包含了以下2个非常重要的属性：</p><table><thead><tr><th align="left">序号</th><th align="left">属性及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>time.timezone</strong> 属性 time.timezone 是当地时区（未启动夏令时）距离格林威治的偏移秒数（&gt;0，美洲&lt;=0大部分欧洲，亚洲，非洲）。</td></tr><tr><td align="left">2</td><td align="left"><strong>time.tzname</strong> 属性time.tzname包含一对根据情况的不同而不同的字符串，分别是带夏令时的本地时区名称，和不带的。</td></tr></tbody></table><p>striftime格式化控制符</p><p><img src="https://i.loli.net/2021/11/15/R6fy2ecSZFj8sYX.png" alt="image-20210817211700282"></p><p>1.时间戳</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeimport datetimet = time.time()<span class="built_in">print</span> (t)                       <span class="comment">#原始时间数据print (int(t))                  #秒级时间戳print (int(round(t * 1000)))    #毫秒级时间戳print (int(round(t * 1000000))) #微秒级时间戳</span></span><br></pre></td></tr></table></figure><p>2.当前时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dt = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)dt_ms = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>) <span class="comment"># 含微秒的日期时间，来源,比特量化print(dt)print(dt_ms)</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import timeprint(time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;,time.localtime()))</span><br></pre></td></tr></table></figure><h2 id="jieba"><a href="#jieba" class="headerlink" title="jieba"></a>jieba</h2><p>一、jieba库基本介绍</p><p> (1)、jieba库概述</p><p>​     jieba是优秀的中文分词第三方库</p><p>​     - 中文文本需要通过分词获得单个的词语<br>​     - jieba是优秀的中文分词第三方库，需要额外安装</p><p>​     - jieba库提供三种分词模式，最简单只需掌握一个函数</p><p> (2)、jieba分词的原理</p><p>​     Jieba分词依靠中文词库</p><p>​     - 利用一个中文词库，确定汉字之间的关联概率<br>​     - 汉字间概率大的组成词组，形成分词结果</p><p>​     - 除了分词，用户还可以添加自定义的词组</p><p>二、jieba库使用说明</p><p> (1)、jieba分词的三种模式</p><p>​     精确模式、全模式、搜索引擎模式</p><p>​     - 精确模式：把文本精确的切分开，不存在冗余单词<br>​     - 全模式：把文本中所有可能的词语都扫描出来，有冗余</p><p>​     - 搜索引擎模式：在精确模式基础上，对长词再次切分</p><p> (2)、jieba库常用函数</p><p><img src="https://i.loli.net/2021/11/30/bLdY5H8ZiFSUMnJ.png" alt="img"></p><h1 id="Python-不定长参数-argc-kargcs"><a href="#Python-不定长参数-argc-kargcs" class="headerlink" title="Python 不定长参数 *argc,**kargcs"></a>Python 不定长参数 *argc,**kargcs</h1><h3 id="一-函数不定长参数语法"><a href="#一-函数不定长参数语法" class="headerlink" title="一.函数不定长参数语法"></a>一.函数不定长参数语法</h3><p>*<em>函数的不定长参数包含*args和*<em>kwargs，完整实例如下：</em></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_print</span>(<span class="params">*args,**kwargs</span>):</span> <span class="comment"># 传递不定长参数，即参数个数不固定    print(args)    print(kwargs)function_print()</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">()&#123;&#125;</span><br></pre></td></tr></table></figure><p>代码分析：由输出结果可以看出来，第一个形参*args 是元组tuple类型，第二个形参**kwargs是字典dict类型.</p><h4 id="1-args的使用方法"><a href="#1-args的使用方法" class="headerlink" title="1.*args的使用方法 :"></a>1.*args的使用方法 :</h4><p><strong>a.形参 *args 类型是元组tuple，外部调用函数时传递的参数不论是整数还是BOOL值或者是字符串str，实际上传递的都是元组数据;</strong></p><p><strong>b.如果函数形参是不定长参数，外部调用函数传递多个参数时，默认按顺序实参匹配形参，剩余的参数全部作为(元组)不定长参数传递；</strong></p><p><strong>c.如果没有为函数的不定长参数传递参数，默认为空元组();</strong></p><p>示例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#普通形参def function_print1(arg):    print(&quot;普通形参 : arg=&quot;,arg)#不定长形参def function_print2(*args):    print(&quot;不定长形参 : args=&quot;,args)#普通形参 + 不定长形参def function_print3(arg,*args):    print(&quot;普通形参 + 不定长形参 : arg=&quot;,arg)    print(&quot;普通形参 + 不定长形参 : args=&quot;,args)function_print1(False)function_print1(&quot;hello world&quot;)print(&quot;***&quot;*20)function_print2(False)function_print2(&quot;hello world&quot;)print(&quot;***&quot;*20)function_print3(False) # 只为函数传递了一个形参，不定长参数的形参默认为空元组()function_print3(&quot;hello world&quot;)print(&quot;***&quot;*20)# 如果函数的形参是不定长参数，当外部调用函数传递多个参数时，默认按顺序匹配形参，剩余的参数全部作为不定长参数传递function_print3(False,1,23,4,5) function_print3(&quot;hello world&quot;,False,0,True,&quot;python教程&quot;)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">普通形参 : arg= False普通形参 : arg= hello world************************************************************不定长形参 : args= (False,)不定长形参 : args= (&#x27;hello world&#x27;,)************************************************************普通形参 + 不定长形参 : arg= False普通形参 + 不定长形参 : args= ()普通形参 + 不定长形参 : arg= hello world普通形参 + 不定长形参 : args= ()************************************************************普通形参 + 不定长形参 : arg= False普通形参 + 不定长形参 : args= (1, 23, 4, 5)普通形参 + 不定长形参 : arg= hello world普通形参 + 不定长形参 : args= (False, 0, True, &#x27;python教程&#x27;)</span><br></pre></td></tr></table></figure><h4 id="2-kwargs的使用方法"><a href="#2-kwargs的使用方法" class="headerlink" title="2.**kwargs的使用方法"></a>2.**kwargs的使用方法</h4><p>*<em>a.形参 *<em>kwargs 类型是字典dict，函数外部调用函数传递参数时需要使用关键字参数，实参写法：a=1,b=2,c=False,d=”hello”;</em></em></p><p><strong>b.如果函数形参是不定长参数，外部调用函数传递多个参数时，默认按顺序实参匹配形参，关键字参数全部作为(字典)不定长参数传递；</strong></p><p><strong>c.如果没有为函数的不定长参数传递参数，默认为空字典{};</strong></p><p>示例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#普通函数def function_print1(arg):    print(&quot;普通函数形参 : arg=&quot;,arg)#普通函数不定长形参def function_print2(**kwargs):    print(&quot;不定长形参 : args=&quot;,kwargs)#普通函数形参 + 不定长形参def function_print3(arg,**kwargs):    print(&quot;普通函数形参 + 不定长形参 : arg=&quot;,arg)    print(&quot;普通函数形参 + 不定长形参 : args=&quot;,kwargs)function_print1(False)function_print1(&quot;hello world&quot;)print(&quot;***&quot;*20)function_print2(a=False)function_print2(c=&quot;hello world&quot;)print(&quot;***&quot;*20)function_print3(False)function_print3(&quot;hello world&quot;)print(&quot;***&quot;*20)function_print3(False,a=1,b=23,h=4,v=5)function_print3(&quot;hello world&quot;,y=False,i=0,a=True,j=&quot;python教程&quot;)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">普通函数形参 : arg= False普通函数形参 : arg= hello world************************************************************不定长形参 : args= &#123;&#x27;a&#x27;: False&#125;不定长形参 : args= &#123;&#x27;c&#x27;: &#x27;hello world&#x27;&#125;************************************************************普通函数形参 + 不定长形参 : arg= False普通函数形参 + 不定长形参 : args= &#123;&#125;普通函数形参 + 不定长形参 : arg= hello world普通函数形参 + 不定长形参 : args= &#123;&#125;************************************************************普通函数形参 + 不定长形参 : arg= False普通函数形参 + 不定长形参 : args= &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 23, &#x27;h&#x27;: 4, &#x27;v&#x27;: 5&#125;普通函数形参 + 不定长形参 : arg= hello world普通函数形参 + 不定长形参 : args= &#123;&#x27;y&#x27;: False, &#x27;i&#x27;: 0, &#x27;a&#x27;: True, &#x27;j&#x27;: &#x27;python教程&#x27;&#125;</span><br></pre></td></tr></table></figure><p>*<em>3.函数不定长参数*args和*<em>kwargs只能放在形参的末尾，顺序不能错.</em></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def function_print(arg1,*args,**kwargs): # *args,**kwargs 必须在形参的末尾，顺序不能乱    pass</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="二-函数不定长参数实战"><a href="#二-函数不定长参数实战" class="headerlink" title="二.函数不定长参数实战"></a>二.函数不定长参数实战</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;普通函数形参 + 不定长形参:    arg1:普通形参    arg1:普通形参    args:不定长参数-元组    kwargs:不定长参数-字典&#x27;&#x27;&#x27;</span><span class="function"><span class="keyword">def</span> <span class="title">function_print</span>(<span class="params">arg1,arg2,*args,**kwargs</span>):</span>    <span class="built_in">print</span>(arg1,arg2,args,kwargs)function_print(<span class="literal">False</span>,<span class="number">1</span>,b=<span class="number">23</span>,h=<span class="number">4</span>,v=<span class="number">5</span>)function_print(<span class="string">&quot;hello world&quot;</span>,<span class="literal">False</span>,<span class="number">0</span>,<span class="literal">True</span>,j=<span class="string">&quot;python教程&quot;</span>,a=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">False 1 () &#123;&#x27;b&#x27;: 23, &#x27;h&#x27;: 4, &#x27;v&#x27;: 5&#125;hello world False (0, True) &#123;&#x27;j&#x27;: &#x27;python教程&#x27;, &#x27;a&#x27;: True&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：注意参数的顺序匹配</strong></p><h3 id="三-重点总结"><a href="#三-重点总结" class="headerlink" title="三.重点总结"></a>三.重点总结</h3><p>注意函数传参的三种形式：</p><p>1.普通传参</p><p>2.缺省参数，如果外部没有为缺省参数传递实参，形参等于默认值</p><p>3.注意不定长参数的拆包，普通实参打包为元组tuple类型，关键字参数打包为字典dict类型</p><p>[^0-9]: </p><h1 id="图像识别-验证码"><a href="#图像识别-验证码" class="headerlink" title="图像识别(验证码)"></a>图像识别(验证码)</h1><h2 id="打码平台"><a href="#打码平台" class="headerlink" title="打码平台"></a>打码平台</h2><p>斐斐打码：<a href="http://www.fateadm.com/user_home.php">http://www.fateadm.com/user_home.php</a></p><p>​    文档：<a href="http://docs.fateadm.com/web/#/1?page_id=5">http://docs.fateadm.com/web/#/1?page_id=5</a></p><p>图鉴：<a href="http://www.ttshitu.com/">http://www.ttshitu.com/</a></p><h2 id="百度ocr"><a href="#百度ocr" class="headerlink" title="百度ocr"></a>百度ocr</h2><blockquote><p>识别效果不够好</p></blockquote><h2 id="ddddocr"><a href="#ddddocr" class="headerlink" title="ddddocr"></a>ddddocr</h2><h1 id="仿站工具"><a href="#仿站工具" class="headerlink" title="仿站工具"></a><strong>仿站工具</strong></h1><p><a href="http://fztool.ptcms.com/">http://fztool.ptcms.com/</a></p><h1 id="图床工具"><a href="#图床工具" class="headerlink" title="图床工具"></a>图床工具</h1><h2 id="SMS"><a href="#SMS" class="headerlink" title="SMS"></a>SMS</h2><p><a href="https://sm.ms/home/picture">https://sm.ms/home/picture</a></p><p>api调用(apiToken)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f3fXNIXf8g6tHsQosCCcPxXg7CxJlAi8​```python<span class="comment"># __author:Chou# data:2021/9/11import requestsdef upload_im(path):    url = &#x27;https://sm.ms/api/v2/upload&#x27;    file_obj = open(path, &#x27;rb&#x27;)    file = &#123;        &#x27;smfile&#x27;: file_obj    &#125;    data_result = requests.post(url, files=file)    # 返回json结果    res = data_result.json()    print(res)    if res[&#x27;success&#x27;]:        img_url = res[&#x27;data&#x27;][&#x27;url&#x27;]        # print(res)    elif res[&#x27;code&#x27;] == &#x27;image_repeated&#x27;:        img_url = res[&#x27;images&#x27;]        # print(img_url)    else:        print(&quot;图片加载出错了&quot;)    return img_urlupload_im(&#x27;3.png&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="Picgo"><a href="#Picgo" class="headerlink" title="Picgo"></a>Picgo</h2><p><a href="https://github.com/Molunerfinn/PicGo/releases">Releases · Molunerfinn/PicGo (github.com)</a></p><blockquote><p>搭配typora 很好用</p></blockquote><h1 id="代理ip"><a href="#代理ip" class="headerlink" title="代理ip"></a>代理ip</h1><p><a href="http://www.66ip.cn/index.html">http://www.66ip.cn/index.html</a></p><p><a href="https://seofangfa.com/proxy/">https://seofangfa.com/proxy/</a></p><p><a href="https://ip.jiangxianli.com/">https://ip.jiangxianli.com/</a></p><p><a href="http://www.xiladaili.com/gaoni/6/">http://www.xiladaili.com/gaoni/6/</a></p><p><a href="http://www.xsdaili.cn/dayProxy/ip/2459.html">http://www.xsdaili.cn/dayProxy/ip/2459.html</a></p><p><a href="http://www.dailiip.cc/freedailiip/2020/0929/966.html">http://www.dailiip.cc/freedailiip/2020/0929/966.html</a></p><p><a href="http://31f.cn/https://www.chenjiayu.cn/archives6462.html">http://31f.cn/https://www.chenjiayu.cn/archives6462.html</a></p><p><a href="https://www.89ip.cn/index.html">https://www.89ip.cn/index.html</a></p><p><a href="https://www.kuaidaili.com/free/inha/">https://www.kuaidaili.com/free/inha/</a></p><p><a href="https://www.feizhuip.com/news-getInfo-id-1122.html">https://www.feizhuip.com/news-getInfo-id-1122.html</a></p><p><a href="https://ip.ihuan.me/">https://ip.ihuan.me/</a></p><p><a href="https://www.7yip.cn/free/">https://www.7yip.cn/free/</a></p><p><a href="http://ip.yqie.com/ipproxy.htm">http://ip.yqie.com/ipproxy.htm</a></p><p><a href="http://ip.yqie.com/world.aspx">http://ip.yqie.com/world.aspx</a></p><p><a href="https://ip.jiangxianli.com/">https://ip.jiangxianli.com/</a></p><p><a href="http://www.ip3366.net/free/?stype=3">http://www.ip3366.net/free/?stype=3</a></p><p><a href="http://www.pachongdaili.com/free/freelist1.html">http://www.pachongdaili.com/free/f</a></p><h1 id="消息推送"><a href="#消息推送" class="headerlink" title="消息推送"></a>消息推送</h1><h2 id="1-sever酱"><a href="#1-sever酱" class="headerlink" title="1.sever酱"></a>1.sever酱</h2><p><a href="http://sc.ftqq.com/?c=code">http://sc.ftqq.com/?c=code</a></p><p><a href="https://sct.ftqq.com/sendkey">https://sct.ftqq.com/sendkey</a></p><p>2.</p><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p><a href="https://www.runoob.com/python3/python3-multithreading.html">Python3 多线程 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://www.cnblogs.com/luyuze95/p/11289143.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B">python多线程详解 - luyuze95 - 博客园 (cnblogs.com)</a></p><p>python主要是通过thread和threading这两个模块来实现多线程支持</p><p>python的thread模块是比较底层的模块，python的threading模块是对thread做了一些封装，可以更加方便的被使用。但是python（cpython）由于GIL的存在无法使用threading充分利用CPU资源，如果想充分发挥多核CPU的计算能力需要使用multiprocessing模块(Windows下使用会有诸多问题)</p><h1 id="处理office"><a href="#处理office" class="headerlink" title="处理office"></a>处理office</h1><p>python-docx</p><p><a href="https://python-docx.readthedocs.io/en/latest/index.html">python-docx — python-docx 0.8.11 documentation</a></p><p>docx转pdf</p><p><a href="https://www.cnblogs.com/jcjc/p/9952207.html">Python 中docx转pdf - 海纳百川_有容乃大 - 博客园 (cnblogs.com)</a></p><p>pdf内容识别</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI2Nzg5MjgyNg==&mid=2247494327&idx=2&sn=ac28a46998e6ba590bb6268371f3d8d4&chksm=eaf54b82dd82c294e1cc3c70e1945d69f89ad8aee8e9a725e9f6980257f753ea0cf2eabfef4b&scene=178&cur_album_id=1771876183576543246#rd">告别「复制+粘贴」，Python 实现PDF转文本 (qq.com)</a></p><p>[(30条消息) <a href="https://blog.csdn.net/xc_zhou/article/details/81009809">312]python提取pdf文本内容_周小董-CSDN博客_python读取pdf内容</a></p><h1 id="centos-8-安装chorme和webdriver"><a href="#centos-8-安装chorme和webdriver" class="headerlink" title="centos 8 安装chorme和webdriver"></a>centos 8 安装chorme和webdriver</h1><p><a href="https://blog.csdn.net/zzzcl112/article/details/80470884?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=1328679.63363.16164686908509475&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">https://blog.csdn.net/zzzcl112/article/details/80470884?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=1328679.63363.16164686908509475&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control</a></p><ol><li>下载后解压 安装rpm包</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm</span><br></pre></td></tr></table></figure><p>查看chrome 版本号 显示说明安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-chrome --version</span><br></pre></td></tr></table></figure><ol start="2"><li><p>安装chromedriver</p><p>镜像仓库地址 <a href="http://chromedriver.storage.googleapis.com/">http://chromedriver.storage.googleapis.com/</a></p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://chromedriver.storage.googleapis.com/89.0.4389.23/chromedriver_linux64.zip</span><br></pre></td></tr></table></figure><ol start="3"><li>解压添加软链</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip chromedriver_linux64.zipmv chromedriver /usr/local/bin/chmod +x /usr/local/bin/chromedriver 测试代码:</span><br></pre></td></tr></table></figure><ol start="4"><li><p>添加环境变量不成功，直接换成绝对路径  /usr/local/bin/chromedriver</p></li><li><p>安装 python3 </p><p>yum install python3</p></li><li><p>安装pip</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.pypython3 get-pip.py</span><br></pre></td></tr></table></figure><ol start="6"><li>安装selenium</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><p>7.服务器上运行driver的核心代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path = &quot;/Aprogramming/daka/chromedriver&quot;#直接把driver放在同级目录调用options = webdriver.ChromeOptions()options.add_argument(&#x27;--headless&#x27;)options.add_argument(&#x27;--disable-gpu&#x27;)options.add_argument(&#x27;--no-sandbox&#x27;)driver = webdriver.Chrome(executable_path=path, options=options)</span><br></pre></td></tr></table></figure><p>8.打码平台</p><p>斐斐打码 <a href="http://www.fateadm.com/user_home.php">http://www.fateadm.com/user_home.php</a></p><p>图鉴   <a href="http://daredian.cn/">http://daredian.cn/</a></p><ol start="9"><li>options</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">–user-data-dir=”[PATH]” 指定用户文件夹User Data路径，可以把书签这样的用户数据保存在系统分区以外的分区。–disk-cache-dir=”[PATH]“ 指定缓存Cache路径–disk-cache-size= 指定Cache大小，单位Byte–first run 重置到初始状态，第一次运行–incognito 隐身模式启动–disable-javascript 禁用Javascript–omnibox-popup-count=”num” 将地址栏弹出的提示菜单数量改为num个。我都改为15个了。–user-agent=”xxxxxxxx” 修改HTTP请求头部的Agent字符串，可以通过about:version页面查看修改效果–disable-plugins 禁止加载所有插件，可以增加速度。可以通过about:plugins页面查看效果–disable-javascript 禁用JavaScript，如果觉得速度慢在加上这个–disable-java 禁用java–start-maximized 启动就最大化–no-sandbox 取消沙盒模式–single-process 单进程运行–process-per-tab 每个标签使用单独进程–process-per-site 每个站点使用单独进程–in-process-plugins 插件不启用单独进程–disable-popup-blocking 禁用弹出拦截–disable-plugins 禁用插件–disable-images 禁用图像–incognito 启动进入隐身模式–enable-udd-profiles 启用账户切换菜单–proxy-pac-url 使用pac代理 [via 1/2]–lang=zh-CN 设置语言为简体中文–disk-cache-dir 自定义缓存目录–disk-cache-size 自定义缓存最大值（单位byte）–media-cache-size 自定义多媒体缓存最大值（单位byte）–bookmark-menu 在工具 栏增加一个书签按钮–enable-sync 启用书签同步–single-process 单进程运行Google Chrome–start-maximized 启动Google Chrome就最大化–disable-java 禁止Java–no-sandbox 非沙盒模式运行</span><br></pre></td></tr></table></figure><h1 id="kite"><a href="#kite" class="headerlink" title="kite"></a>kite</h1><p><a href="https://www.kite.com/welcome/?id=e739a80c-bfc0-48ff-bcb9-73b2fb04a01e">Welcome to Kite - AI Autocomplete for Python</a></p><h1 id="ui设计"><a href="#ui设计" class="headerlink" title="ui设计"></a>ui<strong>设计</strong></h1><h2 id="tkinter"><a href="#tkinter" class="headerlink" title="tkinter"></a>tkinter</h2><p><a href="https://blog.csdn.net/ahilll/article/details/81531587">(28条消息) Python GUI之tkinter窗口视窗教程大集合（看这篇就够了）_ahilll的博客-CSDN博客_tkinter</a></p><p><a href="https://www.runoob.com/python/python-gui-tkinter.html">Python GUI 编程(Tkinter) | 菜鸟教程 (runoob.com)</a></p><p><a href="http://www.byhy.net/">白月黑羽 (byhy.net)</a></p><h2 id="pyqt5"><a href="#pyqt5" class="headerlink" title="pyqt5"></a>pyqt5</h2><h1 id="web开发"><a href="#web开发" class="headerlink" title="web开发"></a>web开发</h1><h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#运行python manage.py runserver 0.0.0.0:80#创建超级用户python manage.py createsuperuser</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Django 框架是用Python语言开发的， 所以安装Django 就像安装其他的 Python库一样，执行如下命令即可</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django</span><br></pre></td></tr></table></figure><p>你可以执行如下命令检查Django是否安装好， 并且查看安装的Django版本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; python -m django --version2<span class="number">.1</span><span class="number">.3</span></span><br></pre></td></tr></table></figure><p>如果像上面那样显示出一个版本数字（比如这里就是2.1.3） 表示已经安装好了。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><blockquote><p>用pycharm可以自动生成django项目</p><p><img src="https://i.loli.net/2021/11/15/FLUWx4VpGeITqhr.png" alt="image-20210902004723085"></p></blockquote><p>安装好以后， 我们需要创建我们 的 项目目录，项目目录里面保存了开发系统的所有文件。</p><p>我们可以创建 <code>d:\projects</code> 作为我们的项目所在的目录。</p><p>然后从命令行窗口中 进入到 <code>d:\projects</code> 目录，执行下面的命令创建项目目录</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject bysms</span><br></pre></td></tr></table></figure><p>注意最后的 <code>bysms</code> 就是项目的根目录名，执行上面命令后，就会创建 如下的目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bysms/    manage.py    bysms/        __init__.py        settings.py        urls.py        wsgi.py</span><br></pre></td></tr></table></figure><ul><li><p>最外层 <code>bysms/</code> 就是项目根目录 <code>d:\projects\bysms\</code> ， 项目文件都放在里面。</p></li><li><p><code>manage.py</code> 是一个工具脚本，用作项目管理的。以后我们会使用它执行管理操作。</p></li><li><p>里面的 <code>bysms/</code> 目录是python包。 里面包含项目的重要配置文件。这个目录名字不能随便改，因为manage.py 要用到它。</p></li><li><p><code>bysms/settings.py</code> 是 Django 项目的配置文件. 包含了非常重要的配置项，以后我们可能需要修改里面的配置。</p></li><li><p><code>bysms/urls.py</code> 里面存放了 一张表， 声明了前端发过来的各种http请求，分别由哪些函数处理. 这个我们后面会重点的讲。</p></li><li><p><code>bysms/wsgi.py</code><br>要了解这个文件的作用， 我们必须明白wsgi 是什么意思</p><p>python 组织制定了 web 服务网关接口（Web Server Gateway Interface） 规范 ，简称wsgi。参考文档 <a href="https://www.python.org/dev/peps/pep-3333/">https://www.python.org/dev/peps/pep-3333/</a></p><p>遵循wsgi规范的 web后端系统， 我们可以理解为 由两个部分组成</p><p><code>wsgi web server</code> 和 <code>wsgi web application</code></p><p>它们通常是运行在一个python进程中的两个模块，或者说两个子系统。</p><p><code>wsgi web server</code> 接受到前端的http请求后，会调用 <code>wsgi web application</code> 的接口（ 比如函数或者类方法）方法，由<code>wsgi web application</code> 具体处理该请求。然后再把处理结果返回给 <code>wsgi web server</code>， <code>wsgi web server</code>再返回给前端。</p><p>如下图所示</p><p><img src="http://cdn1.python3.vip/imgs/gh/36257654_38763872-474e84bc-3fd7-11e8-8e59-6968198db9b8.png" alt="白月黑羽Python3教程"></p><p>为什么要搞出两个子系统，这么麻烦呢？</p><p>因为这两个子系统有各自负责的重点。</p><p><code>wsgi web server</code> 负责 <strong>提供高效的http请求处理环境</strong>，可以使用多线程、多进程或者协程的机制。</p><p>http 请求发送到 <code>wsgi web server</code> ， <code>wsgi web server</code> 分配 线程或者进程或者 轻量级线程(协程)，然后在 这些 线程、进程、或者协程里面，去调用执行 <code>wsgi web application</code> 的入口代码。</p><p><code>wsgi web application</code> 被调用后，负责 <strong>处理 业务逻辑</strong>。 业务逻辑的处理可能非常复杂， <code>wsgi web application</code> 需要精心的设计来正确处理。</p><p>django是 <code>wsgi web application</code> 的框架，它只有一个简单的单线程 <code>wsgi web server</code>。 供调试时使用。</p><p>产品正式上线运行的时候，通常我们需要高效的 <code>wsgi web server</code> 产品，比如 gunicorn，uwsgi，cherrypy等，结合Django ，组成一个高效的 后端服务。</p><p>所以这个 <code>wsgi.py</code> 就是 提供给<code>wsgi web server</code>调用 的接口文件，里面的变量application对应对象实现了 wsgi入口，供<code>wsgi web server</code>调用 。</p></li></ul><p><strong>2021年1月补充</strong></p><p>上面的方式创建的项目，项目配置目录和项目本身目录同名。</p><p>我个人觉得比较怪异。</p><p>可以这样创建目录，结构更合理一些：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行命令创建项目目录，并且进入到项目目录mkdir bysms &amp;&amp; cd bysms# 然后执行命令 创建manage.py 和 项目配置目录 名为 configdjango-admin startproject config .</span></span><br></pre></td></tr></table></figure><h3 id="运行-Django-web服务"><a href="#运行-Django-web服务" class="headerlink" title="运行 Django web服务"></a>运行 Django web服务</h3><p>刚才我们说了， django虽然只是 <code>wsgi web application</code> 的框架，但是它也有一个简单的 <code>wsgi web server</code>。 供调试时使用。</p><p>所以也构成一个完整的后端web服务。 本地调试代码的时候，完全可以运行起来。</p><p>运行开发web 服务只需要在命令行窗口里面，</p><p>首先进入到项目根目录 ，比如，我们这里就是 <code>d:\projects\bysms\</code></p><p>然后执行如下命令</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">80</span></span><br></pre></td></tr></table></figure><p>这样服务就会被启动。 我们就可以在浏览器访问web服务了。</p><p>其中 <code>0.0.0.0:80</code> 是指定 web服务绑定的 IP 地址和端口。</p><p><code>0.0.0.0</code> 表示绑定本机所有的IP地址， 就是可以通过任何一个本机的IP (包括 环回地址 <code>127.0.0.1 </code>) 都可以访问我们的服务。</p><p><code>80</code> 表示是服务启动在80端口上。</p><p>请打开浏览器，地址栏输入 ‘127.0.0.1’ ，就可以看到如下的界面，表示Django服务搭建成功，启动成功。</p><p><img src="https://i.loli.net/2021/11/30/i8ke7MwjbBcIQqy.png" alt="白月黑羽Python3教程"></p><p>注意，启动web服务的命令行窗口不能关闭，如果关闭，web服务就停止了。</p><h1 id="nonebot"><a href="#nonebot" class="headerlink" title="nonebot"></a>nonebot</h1><p>nonebot2官方文档链接：<a href="https://v2.nonebot.dev/">https://v2.nonebot.dev/</a> </p><p>go-cqhttp地址：<a href="https://github.com/Mrs4s/go-cqhttp">https://github.com/Mrs4s/go-cqhttp</a> </p><p>go-cqhttp的api文档：<a href="https://docs.go-cqhttp.org/api/">https://docs.go-cqhttp.org/api/</a></p><p>cq:<a href="https://docs.go-cqhttp.org/cqcode/">CQcode | go-cqhttp 帮助中心</a></p><p>NoneBot.adapters 使用<a href="https://github.com/botuniverse/onebot/blob/master/v11/specs/api/public.md#send_msg-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF">onebot/public.md at master · botuniverse/onebot (github.com)</a></p><p>requirements.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nonebot2</span><br><span class="line">interval</span><br><span class="line">schedule</span><br><span class="line">matplotlib</span><br></pre></td></tr></table></figure><blockquote><p>interval用于判断时间是否在某个区间</p><p>schedule用于设置计划任务</p><p>matplotlib用于把excel转换成图片</p></blockquote><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>使用格式：</p><p><a href="https://v2.nonebot.dev/advanced/scheduler.html">定时任务 | NoneBot</a></p><p><a href="https://blog.csdn.net/a1255652/article/details/118740313?ops_request_misc=%7B%22request_id%22:%22163117036416780271547468%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163117036416780271547468&biz_id=0&utm_medium=distribute.wap_search_result.none-task-blog-2~all~sobaiduend~default-1-118740313.wap_first_rank_v2_rank_v29&utm_term=nonebot2+%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&spm=1018.2118.3001.4450">(26条消息) nonebot2 插件编写指南（二）_a1255652的博客-CSDN博客</a></p><p>官方插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">服务器状态nb plugin install nonebot_plugin_status图片搜索：nb plugin install nonebot_plugin_picsearcher</span><br></pre></td></tr></table></figure><p>1.安装定时插件</p><p>先要引入一个插件：<code>nonebot_plugin_apscheduler</code><br>使用 nb-cli 脚手架来安装这个插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nb plugin install nonebot_plugin_apscheduler</span><br></pre></td></tr></table></figure><p>这个插件与其他不同，稍后会直接导入到需要的位置，无需在 bot.py 中导入<br>除此之外，还需要添加其他配置：</p><p>在<code>.env</code>中添加：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APSCHEDULER_AUTOSTART=trueAPSCHEDULER_CONFIG=&#123;<span class="string">&quot;apscheduler.timezone&quot;</span>: <span class="string">&quot;Asia/Shanghai&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>在 bot.py 中添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nonebot.init(apscheduler_autostart=<span class="literal">True</span>)nonebot.init(apscheduler_config=&#123;    <span class="string">&quot;apscheduler.timezone&quot;</span>: <span class="string">&quot;Asia/Shanghai&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><hr><p>例如，我想在每天中午 12 点发一条测试信息到群（924026546），便可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nonebot <span class="keyword">import</span> on_command, require, get_driverfrom nonebot.typing <span class="keyword">import</span> T_Statefrom nonebot.adapters <span class="keyword">import</span> Bot, Eventfrom nonebot.adapters.cqhttp.message <span class="keyword">import</span> Messageimport nonebot.adapters.cqhttpimport _threadscheduler = require(<span class="string">&#x27;nonebot_plugin_apscheduler&#x27;</span>).scheduler@scheduler.scheduled_job(<span class="string">&#x27;cron&#x27;</span>, hour=<span class="number">12</span>,minute=<span class="number">0</span>)<span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">demo</span>():</span>    driver = get_driver()    BOT_ID = <span class="built_in">str</span>(driver.config.bot_id)    bot = driver.bots[BOT_ID]    group_id=<span class="number">924026546</span>    <span class="keyword">await</span> bot.send_group_msg(group_id=group_id, message=<span class="string">&quot;测试消息&quot;</span>)</span><br></pre></td></tr></table></figure><p>2.和风天气</p><blockquote><p>nb plugin install nonebot_plugin_heweather</p><p>api: <a href="https://devapi.qweather.com/">https://devapi.qweather.com</a></p></blockquote><p><img src="https://i.loli.net/2021/11/15/z3Wnfus9r1N4eEq.png" alt="image-20210910192808254"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HE2109101926581795bdc4a41f9aea478cb994be3fb56ce5f4</span><br></pre></td></tr></table></figure><h1 id="excel转图片"><a href="#excel转图片" class="headerlink" title="excel转图片"></a>excel转图片</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pltfrom pandas.plotting <span class="keyword">import</span> table<span class="string">&quot;&quot;&quot;本来想转成图片实验很久还是发不出去    # 转成图片    mpl.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;Microsoft YaHei&#x27;]  # 指定默认字体：解决plot不能显示中文问题    mpl.rcParams[&#x27;axes.unicode_minus&#x27;] = False    # figsize 指定figure的宽和高，单位为英寸；    # dpi参数指定绘图对象的分辨率，即每英寸多少个像素，缺省值为80      1英寸等于2.5cm,A4纸是 21*30cm的纸张    fig = plt.figure(figsize=(9, 10), dpi=900)    # frameon:是否显示边框    ax = fig.add_subplot(111, frame_on=False, )    # 隐藏x轴 y轴    ax.xaxis.set_visible(False)  # hide the x axis    ax.yaxis.set_visible(False)  # hide the y axis    # 读取excel    datas = pd.read_excel(&#x27;1.xlsx&#x27;)    datas = datas.iloc[:, 0:]    # print(datas)    # 生成图片    table(ax, datas, loc=&#x27;center&#x27;)  # where df is your data frame    # 保存图片    plt.savefig(&#x27;photo.jpg&#x27;)&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="实用的第三方库"><a href="#实用的第三方库" class="headerlink" title="实用的第三方库"></a>实用的第三方库</h1><h2 id="pyautogui"><a href="#pyautogui" class="headerlink" title="pyautogui"></a>pyautogui</h2><p>自动化模拟鼠标和键盘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautoguipyautogui.PAUSE = 1pyautogui.FAILSAFE = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="0-防止故障："><a href="#0-防止故障：" class="headerlink" title="0.防止故障："></a>0.防止故障：</h3><p>pyautogui.PAUSE 设置为1，即每次函数调用后<br>暂停一秒。将pyautogui.FAILSAFE 设置为True，启动自动防故障功能。</p><h3 id="1-屏幕参数"><a href="#1-屏幕参数" class="headerlink" title="1.屏幕参数"></a>1.屏幕参数</h3><p>分辨率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautoguipyautogui.size()  <span class="comment"># 1920×1080width, height = pyautogui.size()</span></span><br></pre></td></tr></table></figure><p>获取鼠标位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautoguipyautogui.position()</span><br></pre></td></tr></table></figure><h3 id="2-移动鼠标"><a href="#2-移动鼠标" class="headerlink" title="2.移动鼠标"></a>2.移动鼠标</h3><p> <a href="1.py">1.py</a> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui<span class="comment"># 防止故障pyautogui.PAUSE = 1pyautogui.FAILSAFE = Truedef test1():     # pyautogui.moveTo() 函数    &quot;&quot;&quot;简单的一个例子&quot;&quot;&quot;    for i in range(5):        &#x27;&#x27;&#x27;        1. 可选的duration 整数或浮点数关键字参数，指定了将鼠标移到目的        位置所需的秒数        2. 运行这个程序鼠标在指定的位置转5圈        &#x27;&#x27;&#x27;        pyautogui.moveTo(100, 100, duration=0.25)        pyautogui.moveTo(200, 100, duration=0.25)        pyautogui.moveTo(200, 200, duration=0.25)        pyautogui.moveTo(100, 200, duration=0.25)def test2():  # pyautogui.moveRel() 函数    for i in range(5):        &#x27;&#x27;&#x27;        1.鼠标原地转圈        2.和test1()有区别        &#x27;&#x27;&#x27;        pyautogui.moveRel(100, 0, duration=0.25)        pyautogui.moveRel(0, 100, duration=0.25)        pyautogui.moveRel(-100, 0, duration=0.25)        pyautogui.moveRel(0, -100, duration=0.25)</span></span><br></pre></td></tr></table></figure><h3 id="3-控制鼠标交互"><a href="#3-控制鼠标交互" class="headerlink" title="3.控制鼠标交互"></a>3.控制鼠标交互</h3><p>①点击鼠标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautoguipyautogui.click（<span class="number">100</span>，<span class="number">150</span>，button=<span class="string">&#x27;left&#x27;</span>）pyautogui.click（<span class="number">200</span>，<span class="number">250</span>，button=<span class="string">&#x27;right&#x27;</span>）pyautogui.doubleClick()  <span class="comment"># 双击左键pyautogui.rightClick()  # 双击右键 pyautogui.middleClick()  # 双击中键</span></span><br></pre></td></tr></table></figure><p>②拖动鼠标</p><p>③④</p><h2 id="you-get"><a href="#you-get" class="headerlink" title="you-get"></a>you-get</h2><p>pip install you-get</p><p>1.找到you-get.exe加入环境变量(不太成功)</p><p>2.cd 安装路径 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd C:\Users\Chou\AppData\Local\Packages\PythonSoftwareFoundation.Python<span class="number">.3</span><span class="number">.7</span>_qbz5n2kfra8p0\LocalCache\local-packages\Python37\Scripts</span><br></pre></td></tr></table></figure><h2 id="Pygame"><a href="#Pygame" class="headerlink" title="Pygame"></a>Pygame</h2><table><thead><tr><th>模块名</th><th>功能</th></tr></thead><tbody><tr><td>pygame.cdrom</td><td>访问光驱</td></tr><tr><td>pygame.cursors</td><td>加载光标</td></tr><tr><td>pygame.display</td><td>访问设备显示</td></tr><tr><td>pygame.draw</td><td>绘制形状、线和点</td></tr><tr><td>pygame.event</td><td>管理事件</td></tr><tr><td>pygame.font</td><td>使用字体</td></tr><tr><td>pygame.image</td><td>加载和存储图片</td></tr><tr><td>pygame.joystick</td><td>使用手柄或类似的东西</td></tr><tr><td>pygame.key</td><td>读取键盘按键</td></tr><tr><td>pygame.mixer</td><td>声音</td></tr><tr><td>pygame.mouse</td><td>鼠标</td></tr><tr><td>pygame.movie</td><td>播放视频</td></tr><tr><td>pygame.music</td><td>播放音频</td></tr><tr><td>pygame.overlay</td><td>访问高级视频叠加</td></tr><tr><td>pygame.rect</td><td>管理矩形区域</td></tr><tr><td>pygame.sndarray</td><td>操作声音数据</td></tr><tr><td>pygame.sprite</td><td>操作移动图像</td></tr><tr><td>pygame.surface</td><td>管理图像和屏幕</td></tr><tr><td>pygame.surfarray</td><td>管理点阵图像数据</td></tr><tr><td>pygame.time</td><td>管理时间和帧信息</td></tr><tr><td>pygame.transform</td><td>缩放和移动图像</td></tr></tbody></table><h1 id="gitee-page"><a href="#gitee-page" class="headerlink" title="gitee page"></a>gitee page</h1><h2 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1.安装git"></a>1.安装git</h2><h2 id="2-配置-Git-参数"><a href="#2-配置-Git-参数" class="headerlink" title="2.配置 Git 参数"></a>2.配置 Git 参数</h2><p>过程跟上篇文章一样，已经做过的步骤不用再重复，直接到复制公钥那一步。</p><p>在博客根目录下，右键，打开Git Bash Here。</p><p>配置用户名和邮箱，这两个参数用于 Git 提交时的身份识别。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY# 其中 username 和 username@XXX.com 是你注册 Gitee 的用户名和邮箱，如果账号不是邮箱注册的话，填自己的一个邮箱地址就行了git config --global user.name &quot;username&quot;git config --global user.email &quot;username@XXX.com&quot;</span><br></pre></td></tr></table></figure><p>生成 SSH keys，主要用于Git 提交时的权限控制和加密，本地根据 RSA 算法生成公私密钥对，然后将公钥添加到 Gitee 上，本机就可以提交代码到自己的 GitHub 库了。这个是根据当前使用的电脑的一些信息生成的，所以换电脑提交时要重新生成并添加。</p><p>输入下面命令，然后一直按回车，直到结束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY# 其中 username@XXX.com 同上，是你的注册邮箱ssh-keygen -t rsa -C &quot;username@XXX.com&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/29/5eTsFra2bWBCSXH.png" alt="image-20201229233801498"></p><p>输入下面的命令，查看公钥内容，应该是一个<code>ssh-rsa</code>开头，以<code>你的邮箱</code>结尾的长字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY# cat后面的路径就是上图中的公钥文件路径，直接复制过来就可以。其中XXX是你的电脑用户名。cat /c/Users/XXX/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/29/ojVX1G75WNqHzul.png" alt="image-20201229234452012"></p><p>复制公钥内容（其实在Git Bash命令行里，默认选中文字松开鼠标就会自动把选中内容复制到剪贴板，点击鼠标中键是粘贴）。</p><h2 id="3-配置秘钥"><a href="#3-配置秘钥" class="headerlink" title="3.配置秘钥"></a>3.配置秘钥</h2><p>查看是否成功：ssh -T <a href="mailto:&#103;&#105;&#116;&#64;&#103;&#105;&#x74;&#101;&#101;&#46;&#99;&#111;&#109;">&#103;&#105;&#116;&#64;&#103;&#105;&#x74;&#101;&#101;&#46;&#99;&#111;&#109;</a></p><h2 id="4-安装hexo"><a href="#4-安装hexo" class="headerlink" title="4.安装hexo"></a>4.安装hexo</h2><p>cmd管理员:</p><p>npm config set registry=<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a></p><p>npm install -g hexo-cli</p><p>git:</p><p>npm config set registry=<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a></p><p>npm install -g hexo-cli</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> python </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitee搭建图床</title>
      <link href="/blog/2021/11/30/gitee%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
      <url>/blog/2021/11/30/gitee%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>仅个人学习用，以下是记得笔记</p><h2 id="Gitee-图床"><a href="#Gitee-图床" class="headerlink" title="Gitee 图床"></a>Gitee 图床</h2><h4 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1. 新建仓库"></a>1. 新建仓库</h4><p><img src="https://i.loli.net/2021/11/30/OTshla73fdJLM8V.png" alt="image-20210113221426230"></p><h4 id="2-获取私人令牌"><a href="#2-获取私人令牌" class="headerlink" title="2. 获取私人令牌"></a>2. 获取私人令牌</h4><p>同样的，<code>私人令牌</code>和 GitHub 上的 token 一样，主要用于让 PicGo 有权限往我们的仓库 push 代码(图片)。</p><p>点击自己的头像，选择<code>设置</code>。</p><p><img src="https://i.loli.net/2021/11/30/Jo42W8QR7ntqBUx.png" alt="image-20210113222056606"></p><p>点击<code>私人令牌</code>，选择生成新令牌。</p><p><img src="https://i.loli.net/2021/11/30/xQAGgczbonNEtHy.png" alt="image-20210113222420963"></p><p>同样的，我们只勾选更新代码的权限。填写<code>私人令牌描述</code>，点击提交。因为是敏感操作，此时需要确认密码。</p><p><img src="https://i.loli.net/2021/11/30/gW1oSLpTlOwG9yX.png" alt="image-20210113222755852"></p><p>复制字符串下一步使用。注意，为了安全起见此字符串只会出现一次，点击其他页面后就无法再查看了，需要重新创建，所以最好先保存到本地编辑器中。</p><p><img src="https://i.loli.net/2021/11/30/WIRhrTNapvi9q7B.png" alt="image-20210113223101983"></p><h4 id="3-PicGo-配置"><a href="#3-PicGo-配置" class="headerlink" title="3. PicGo 配置"></a>3. PicGo 配置</h4><p>PicGo 本体没有支持 Gitee ，所以需要下载一个插件，有人己经写好了。</p><p>打开 PicGo ，点击 <code>插件设置</code>，搜索框输入<code>gitee</code>，目前有两个插件应该都能用，任选一个安装，这里我选择的后面那个。</p><p><img src="https://i.loli.net/2021/11/30/aAXB2Z6CsVF58rP.png" alt="image-20210113225243341"></p><p>安装好插件后，这时再选择<code>图床设置</code>，选择<code>gitee</code>，填写参数：</p><ul><li><code>repo</code>，填写格式为<code>用户名/仓库名</code></li><li><code>branch</code>，填写默认分支<code>master</code></li><li><code>token</code>，填写上一步获取的私人令牌的值</li><li><code>path</code>，选填，可以自定义名称，不填图片会上传在仓库根目录。</li><li><code>customPath</code>，这个会在上一个参数的基础上再创建一层子文件夹用于按年、年月或年季来分类保存。</li><li><code>customUrl</code>，用于修改返回的 url 前缀，不填则返回原始 url。后面解决<code>文件大于1M，登录后可见</code>的问题需要更改此项。</li></ul><p>在 PicGo 里，GitHub 的设置都是中文的， Gitee 插件的设置反而都是英文的，有点意思hh。</p><p>选择设为默认图床，点击确定保存配置。</p><p><img src="https://i.loli.net/2021/11/30/DCsvg5L3XHt4WBY.png" alt="image-20210113224703801"></p><p>配置完成后，点击<code>上传区</code>，随便选择电脑上一张图片拖动到上传区，上传成功后会弹窗提示，将该 url 复制到浏览器打开就可以看到图片。可以在<code>PicGo设置</code>，打开<code>上传后自动复制URL</code>，这样上传成功后图片 url 会自动复制在剪贴板，可以直接粘贴到记事本。</p><p><img src="https://i.loli.net/2021/11/30/87bfrXnJ91xiK5O.png" alt="image-20210112235111559"></p><p><img src="https://i.loli.net/2021/11/30/NhK7sRQdYxSMjz1.png" alt="image-20210113224024050"></p><h4 id="4-Typora-配置"><a href="#4-Typora-配置" class="headerlink" title="4. Typora 配置"></a>4. Typora 配置</h4><p>打开<code>文件</code>，<code>偏好设置</code>，<code>图像</code>，选择插入图片时<code>上传图片</code>，勾选图中三个选项，上传服务设定选择<code>PicGo (app)</code>，PicGo 路径通过后面的文件夹选择自己电脑上 PicGo 的安装路径。</p><p><img src="https://i.loli.net/2021/11/30/uxjBpNogQPG8Hnv.png" alt="image-20210112233235226"></p><p>此时，使用 Typora 编辑文件，拖入或者粘贴图片时，会自动调用 PicGo 将图片上传到我们的 Gitee 图床，并把返回的图片链接粘贴到文章中，快去试试吧。</p><h4 id="5-解决”文件大于1M，登录后可见”问题"><a href="#5-解决”文件大于1M，登录后可见”问题" class="headerlink" title="5. 解决”文件大于1M，登录后可见”问题"></a>5. 解决”文件大于1M，登录后可见”问题</h4><p>从上一步可以看到 Gitee 存储的图片地址是 <code>https://gitee.com/yushuaigee/myblog/raw</code> 开头的网址，这个域名是国内站点，速度很快，无需配置CDN加速，图床配置好之后，图片上传成功，在浏览器也能打开，看似没毛病，其实暗藏玄机。</p><p>如果你上传的图片大于 1M ，不管是在下一步的 Typora 中还是在浏览器网页中，是无法加载出图片的，比如这张图片<code>https://gitee.com/yushuaigee/myblog/raw/master/img/myblog.gif</code>，输入到浏览器会显示<code>文件大于1M，登录后可见</code>。如果能打开是因为你前面已经登录了 Gitee 了，浏览器新建一个无痕窗口就打不开了。</p><p><img src="https://i.loli.net/2021/11/30/S3aAFfo9x7cMwCm.png" alt="image-20210113230821769"></p><p>可是别人在浏览我们博客时不可能要先登录个 Gitee 吧，所以要想办法解决一下。前面我们将博客仓库打开 Gitee Pages 功能，其他人可以访问我们博客仓库里的博客了，图床仓库也一样，打开它的 Gitee Pages 功能，无需登陆就可以访问里面的图片了。</p><p>进入图床仓库主页，点击<code>服务</code>，<code>Gitee Pages</code>。</p><p><img src="https://i.loli.net/2021/11/30/lsC4yzPNoQfdKFX.png" alt="image-20210113231334002"></p><p>点击<code>启动</code>部署。</p><p><img src="https://i.loli.net/2021/11/30/QnwtRhjm75OGWaS.png" alt="image-20210113232431704"></p><p>这样我们就可以通过Gitee Pages 地址来访问图床仓库里的图片了 ，地址前缀需要改一下。</p><p><strong>对应的，PicGo 中就需要改一下自定义域名</strong>，之后上传图片自动生成的链接就是 Gitee Pages 上的地址了。具体就是在<code>customUrl</code>填写<code>https://用户名.gitee.io/仓库名</code>。</p><p><img src="https://i.loli.net/2021/11/30/fzKWVhYvxbrHnqc.png" alt="image-20210113233142363"></p><p><strong>这种方法也存在一个问题</strong>，就是因为 Gitee Pages 不支持自动更新 (pro版支持，需要收费)，每次上传完图片后，需要打开浏览器手动点一下更新。你可以写完文章，把图片一把上传，再点一次更新，但是终究还是有点麻烦。</p><p><img src="https://i.loli.net/2021/11/30/eL71fXKgRqxidjI.png" alt="image-20210113231428575"></p><h4 id="网上还有一堆脚本说能更新gitee-page"><a href="#网上还有一堆脚本说能更新gitee-page" class="headerlink" title="网上还有一堆脚本说能更新gitee page"></a>网上还有一堆脚本说能更新gitee page</h4><p><a href="https://github.com/marketplace/actions/gitee-pages-action">Gitee Pages Action · Actions · GitHub Marketplace</a></p><p>但是，不好用折腾来去没成功</p><p>最后送给折腾了一下午的自己：sm.ms 不香吗？</p><p>😓5G不够换小号再来5G</p><h2 id="github图床"><a href="#github图床" class="headerlink" title="github图床"></a>github图床</h2><p>我直接不写了，没啥意义，cdn麻烦死了</p><h2 id="还有各式各样的图床"><a href="#还有各式各样的图床" class="headerlink" title="还有各式各样的图床"></a>还有各式各样的图床</h2><p>我试过的没试过得，一句话用sm.ms 算了</p><p><img src="https://hutters.gitee.io/imgs/image-20211130202822683.png" alt="image-20211130202822683"></p>]]></content>
      
      
      
        <tags>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建gitee page真的很多坑</title>
      <link href="/blog/2021/11/29/gitee-page-%E5%AE%89%E8%A3%85hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/blog/2021/11/29/gitee-page-%E5%AE%89%E8%A3%85hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>所有操作先建一个空白文件夹名字随意</p><blockquote><p>主要记录自己安装的过程并不详细</p></blockquote><h2 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1.安装git"></a>1.安装git</h2><p>略</p><h2 id="2-配置-Git-参数"><a href="#2-配置-Git-参数" class="headerlink" title="2.配置 Git 参数"></a>2.配置 Git 参数</h2><p>过程跟上篇文章一样，已经做过的步骤不用再重复，直接到复制公钥那一步。</p><p>在博客根目录下，右键，打开Git Bash Here。</p><p>配置用户名和邮箱，这两个参数用于 Git 提交时的身份识别。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COPY# 其中 username 和 username@XXX.com 是你注册 Gitee 的用户名和邮箱，如果账号不是邮箱注册的话，填自己的一个邮箱地址就行了</span><br><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email &quot;username@XXX.com&quot;</span><br></pre></td></tr></table></figure><p>生成 SSH keys，主要用于Git 提交时的权限控制和加密，本地根据 RSA 算法生成公私密钥对，然后将公钥添加到 Gitee 上，本机就可以提交代码到自己的 GitHub 库了。这个是根据当前使用的电脑的一些信息生成的，所以换电脑提交时要重新生成并添加。</p><p>输入下面命令，然后一直按回车，直到结束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY# 其中 username@XXX.com 同上，是你的注册邮箱</span><br><span class="line">ssh-keygen -t rsa -C &quot;username@XXX.com&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/29/zCj9q8n7bhWVOci.png" alt="image-20201229233801498"></p><p>输入下面的命令，查看公钥内容，应该是一个<code>ssh-rsa</code>开头，以<code>你的邮箱</code>结尾的长字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY# cat后面的路径就是上图中的公钥文件路径，直接复制过来就可以。其中XXX是你的电脑用户名。</span><br><span class="line">cat /c/Users/XXX/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/29/aMlYqxtAFhZQkc9.png" alt="image-20201229234452012"></p><p>复制公钥内容（其实在Git Bash命令行里，默认选中文字松开鼠标就会自动把选中内容复制到剪贴板，点击鼠标中键是粘贴）。</p><h2 id="3-配置秘钥"><a href="#3-配置秘钥" class="headerlink" title="3.配置秘钥"></a>3.配置秘钥</h2><p><strong>一定要配置到个人主页，不是仓库</strong></p><p><img src="https://i.loli.net/2021/11/29/lyP8bxf7hAYU4mg.png" alt="image-20211129231631074"></p><p>查看是否成功：ssh -T <a href="mailto:&#x67;&#105;&#116;&#x40;&#x67;&#105;&#116;&#101;&#101;&#46;&#x63;&#x6f;&#109;">&#x67;&#105;&#116;&#x40;&#x67;&#105;&#116;&#101;&#101;&#46;&#x63;&#x6f;&#109;</a></p><h2 id="4-安装hexo"><a href="#4-安装hexo" class="headerlink" title="4.安装hexo"></a>4.安装hexo</h2><p>官方：<a href="https://hexo.io/zh-cn/index.html">Hexo</a></p><ol><li><del>cmd管理员:（似乎多此一举）</del></li></ol><blockquote><p><del>npm config set registry=<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a></del></p><p><del>npm install -g hexo-cli</del></p></blockquote><ol start="2"><li>进入git界面:</li></ol><blockquote><p>npm config set registry=<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a></p><p>npm install -g hexo-cli</p><p><strong>#安装发布插件</strong></p><p>npm install hexo-deployer-git </p><p>hexo init #初始化</p></blockquote><h2 id="5-配置-config-yml文件"><a href="#5-配置-config-yml文件" class="headerlink" title="5.配置_config.yml文件"></a>5.配置_config.yml文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@gitee.com:xxxxxx/xxxxxx.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="6-页面加载没有样式以及路径问题解决❗"><a href="#6-页面加载没有样式以及路径问题解决❗" class="headerlink" title="6.页面加载没有样式以及路径问题解决❗"></a>6.页面加载没有样式以及路径问题解决❗</h2><p>修改配置文件,不这样改二级目录访问css,js加载不出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url: https://xxx.gitee.io/abc</span><br><span class="line">root: /abc/</span><br></pre></td></tr></table></figure><h2 id="7-解决图片路径问题（不如用图床）"><a href="#7-解决图片路径问题（不如用图床）" class="headerlink" title="7.解决图片路径问题（不如用图床）"></a>7.解决图片路径问题（不如用图床）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save  #安装 hexo-asset-image 插件</span><br></pre></td></tr></table></figure><p>接下来还需要修改一下 <code>_config.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line">post_asset_folder: true</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h2 id="8-几个插件"><a href="#8-几个插件" class="headerlink" title="8.几个插件"></a>8.几个插件</h2><p><strong>安装发布插件</strong></p><p>npm install hexo-deployer-git </p><p>图片插件</p><p>npm install hexo-image-link –save</p><p>npm install hexo-filter-inline-assets –save</p><p>#本地搜索插件</p><p>npm install –save hexo-generator-search</p><p>#生成tags和分类</p><p>npm install hexo-enhancer –save</p><p>修改配置文件：</p><p>keywords: HTML, JavaScript, Hexo<br>tags: Java, Golang, React, Vue</p><h2 id="9-安装主题"><a href="#9-安装主题" class="headerlink" title="9.安装主题"></a>9.安装主题</h2><p>#我用的主题插件</p><p>git clone -b master <a href="https://gitee.com/immyw/hexo-theme-butterfly.git">https://gitee.com/immyw/hexo-theme-butterfly.git</a> themes/butterfly</p><p>npm install hexo-renderer-pug hexo-renderer-stylus –save</p><h2 id="8-发布"><a href="#8-发布" class="headerlink" title="8.发布"></a>8.发布</h2><p>hexo g</p><p>hexo d</p><h2 id="9-安装后折腾一下布局标签之类的"><a href="#9-安装后折腾一下布局标签之类的" class="headerlink" title="9.安装后折腾一下布局标签之类的"></a>9.安装后折腾一下布局标签之类的</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><ol><li><p>前往你的 Hexo 博客的根目錄</p></li><li><p>輸入hexo new page tags</p></li><li><p>你會找到source/tags/index.md這個文件</p></li><li><p>修改這個文件：</p></li></ol><p>​    記得添加 type: “tags”</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li><p>前往你的 Hexo 博客的根目錄</p></li><li><p>輸入hexo new page categories</p></li><li><p>你會找到source/categories/index.md這個文件</p></li><li><p>修改這個文件：</p><p>記得添加 type: “categories”</p></li></ol><h3 id="小图标note"><a href="#小图标note" class="headerlink" title="小图标note"></a>小图标note</h3><p><a href="https://butterfly.js.org/posts/4aa8abbe/#Note-Bootstrap-Callout">Butterfly 安装文档（三） 主题配置-1 | Butterfly</a></p><p><img src="https://hutters.gitee.io/imgs/image-20211130211323199.png" alt="image-20211130211323199"></p><h3 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h3><p><a href="https://butterfly.js.org/posts/4aa8abbe/#mermaid">Butterfly 安装文档（三） 主题配置-1 | Butterfly</a></p><p><img src="https://hutters.gitee.io/imgs/image-20211130211511428.png" alt="image-20211130211511428"></p><h3 id="laber"><a href="#laber" class="headerlink" title="laber"></a>laber</h3><p><a href="https://butterfly.js.org/posts/4aa8abbe/#label">Butterfly 安装文档（三） 主题配置-1 | Butterfly</a></p><p><img src="https://hutters.gitee.io/imgs/image-20211130211745910.png" alt="image-20211130211745910"></p>]]></content>
      
      
      
        <tags>
            
            <tag> gitee </tag>
            
            <tag> gitee page </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
